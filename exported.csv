** Import **,** Name **,** Description **
java.awt.AWTError,AWTError,"Thrown when a serious Abstract Window Toolkit error has occurred."
java.awt.AWTException,AWTException,"Signals that an Abstract Window Toolkit exception has occurred."
java.awt.color.CMMException,CMMException,"This exception is thrown if the native CMM returns an error."
java.awt.color.ProfileDataException,ProfileDataException,"This exception is thrown when an error occurs in accessing or processing an ICC_Profile object."
java.awt.datatransfer.MimeTypeParseException,MimeTypeParseException,"A class to encapsulate MimeType parsing related exceptions"
java.awt.datatransfer.UnsupportedFlavorException,UnsupportedFlavorException,"Signals that the requested data is not supported in this flavor."
java.awt.dnd.InvalidDnDOperationException,InvalidDnDOperationException,"This exception is thrown by various methods in the java.awt.dnd package. It is usually thrown to indicate that the target in question is unable to undertake the requested operation that the present time, since the underlying DnD system is not in the appropriate state."
java.awt.FontFormatException,FontFormatException,"Thrown by method createFont in the Font class to indicate that the specified font is bad."
java.awt.geom.IllegalPathStateException,IllegalPathStateException,"The IllegalPathStateException represents an exception that is thrown if an operation is performed on a path that is in an illegal state with respect to the particular operation being performed, such as appending a path segment to a GeneralPath without an initial moveto."
java.awt.geom.NoninvertibleTransformException,NoninvertibleTransformException,"The NoninvertibleTransformException class represents an exception that is thrown if an operation is performed requiring the inverse of an AffineTransform object but the AffineTransform is in a non-invertible state."
java.awt.HeadlessException,HeadlessException,"Thrown when code that is dependent on a keyboard, display, or mouse is called in an environment that does not support a keyboard, display, or mouse."
java.awt.IllegalComponentStateException,IllegalComponentStateException,"Signals that an AWT component is not in an appropriate state for the requested operation."
java.awt.image.ImagingOpException,ImagingOpException,"The ImagingOpException is thrown if one of the BufferedImageOp or RasterOp filter methods cannot process the image."
java.awt.image.RasterFormatException,RasterFormatException,"The RasterFormatException is thrown if there is invalid layout information in the Raster."
java.awt.print.PrinterAbortException,PrinterAbortException,"The PrinterAbortException class is a subclass of PrinterException and is used to indicate that a user or application has terminated the print job while it was in the process of printing."
java.awt.print.PrinterException,PrinterException,"The PrinterException class and its subclasses are used to indicate that an exceptional condition has occurred in the print system."
java.awt.print.PrinterIOException,PrinterIOException,"The PrinterIOException class is a subclass of PrinterException and is used to indicate that an IO error of some sort has occurred while printing. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "IOException that terminated the print job" that is provided at construction time and accessed via the getIOException() method is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy method.""
java.beans.ExceptionListener,ExceptionListener,"An ExceptionListener is notified of internal exceptions."
java.beans.IntrospectionException,IntrospectionException,"Thrown when an exception happens during Introspection.  Typical causes include not being able to map a string class name to a Class object, not being able to resolve a string method name, or specifying a method name that has the wrong type signature for its intended use."
java.beans.PropertyVetoException,PropertyVetoException,"A PropertyVetoException is thrown when a proposed change to a property represents an unacceptable value."
java.io.CharConversionException,CharConversionException,"Base class for character conversion exceptions."
java.io.EOFException,EOFException,"Signals that an end of file or end of stream has been reached unexpectedly during input.  This exception is mainly used by data input streams to signal end of stream. Note that many other input operations return a special value on end of stream rather than throwing an exception."
java.io.FileNotFoundException,FileNotFoundException,"Signals that an attempt to open the file denoted by a specified pathname has failed.  This exception will be thrown by the FileInputStream, FileOutputStream, and RandomAccessFile constructors when a file with the specified pathname does not exist.  It will also be thrown by these constructors if the file does exist but for some reason is inaccessible, for example when an attempt is made to open a read-only file for writing."
java.io.InterruptedIOException,InterruptedIOException,"Signals that an I/O operation has been interrupted. An InterruptedIOException is thrown to indicate that an input or output transfer has been terminated because the thread performing it was interrupted. The field bytesTransferred indicates how many bytes were successfully transferred before the interruption occurred."
java.io.InvalidClassException,InvalidClassException,"Thrown when the Serialization runtime detects one of the following problems with a Class.   The serial version of the class does not match that of the class      descriptor read from the stream  The class contains unknown datatypes  The class does not have an accessible no-arg constructor "
java.io.InvalidObjectException,InvalidObjectException,"Indicates that one or more deserialized objects failed validation tests.  The argument should provide the reason for the failure."
java.io.IOError,IOError,"Thrown when a serious I/O error has occurred."
java.io.IOException,IOException,"Signals that an I/O exception of some sort has occurred. This class is the general class of exceptions produced by failed or interrupted I/O operations."
java.io.NotActiveException,NotActiveException,"Thrown when serialization or deserialization is not active."
java.io.NotSerializableException,NotSerializableException,"Thrown when an instance is required to have a Serializable interface. The serialization runtime or the class of the instance can throw this exception. The argument should be the name of the class."
java.io.ObjectStreamException,ObjectStreamException,"Superclass of all exceptions specific to Object Stream classes."
java.io.OptionalDataException,OptionalDataException,"Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream.  This exception may be thrown in two cases:    An attempt was made to read an object when the next element in the       stream is primitive data.  In this case, the OptionalDataException's       length field is set to the number of bytes of primitive data       immediately readable from the stream, and the eof field is set to       false.   An attempt was made to read past the end of data consumable by a       class-defined readObject or readExternal method.  In this case, the       OptionalDataException's eof field is set to true, and the length field       is set to 0. "
java.io.StreamCorruptedException,StreamCorruptedException,"Thrown when control information that was read from an object stream violates internal consistency checks."
java.io.SyncFailedException,SyncFailedException,"Signals that a sync operation has failed."
java.io.UncheckedIOException,UncheckedIOException,"Wraps an IOException with an unchecked exception."
java.io.UnsupportedEncodingException,UnsupportedEncodingException,"The Character Encoding is not supported."
java.io.UTFDataFormatException,UTFDataFormatException,"Signals that a malformed string in modified UTF-8 format has been read in a data input stream or by any class that implements the data input interface. See the DataInput class description for the format in which modified UTF-8 strings are read and written."
java.io.WriteAbortedException,WriteAbortedException,"Signals that one of the ObjectStreamExceptions was thrown during a write operation.  Thrown during a read operation when one of the ObjectStreamExceptions was thrown during a write operation.  The exception that terminated the write can be found in the detail field. The stream is reset to it's initial state and all references to objects already deserialized are discarded. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "exception causing the abort" that is provided at construction time and accessed via the public detail field is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy field.""
java.lang.AbstractMethodError,AbstractMethodError,"Thrown when an application tries to call an abstract method. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of some class has incompatibly changed since the currently executing method was last compiled."
java.lang.annotation.AnnotationFormatError,AnnotationFormatError,"Thrown when the annotation parser attempts to read an annotation from a class file and determines that the annotation is malformed. This error can be thrown by the API used to read annotations reflectively."
java.lang.annotation.AnnotationTypeMismatchException,AnnotationTypeMismatchException,"Thrown to indicate that a program has attempted to access an element of an annotation whose type has changed after the annotation was compiled (or serialized). This exception can be thrown by the API used to read annotations reflectively."
java.lang.annotation.IncompleteAnnotationException,IncompleteAnnotationException,"Thrown to indicate that a program has attempted to access an element of an annotation type that was added to the annotation type definition after the annotation was compiled (or serialized).  This exception will not be thrown if the new element has a default value. This exception can be thrown by the API used to read annotations reflectively."
java.lang.ArithmeticException,ArithmeticException,"Thrown when an exceptional arithmetic condition has occurred. For example, an integer "divide by zero" throws an instance of this class. ArithmeticException objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable."
java.lang.ArrayIndexOutOfBoundsException,ArrayIndexOutOfBoundsException,"Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array."
java.lang.ArrayStoreException,ArrayStoreException,"Thrown to indicate that an attempt has been made to store the wrong type of object into an array of objects. For example, the following code generates an ArrayStoreException:      Object x[] = new String[3];     x[0] = new Integer(0); "
java.lang.AssertionError,AssertionError,"Thrown to indicate that an assertion has failed. The seven one-argument public constructors provided by this class ensure that the assertion error returned by the invocation:      new AssertionError(expression)  has as its detail message the string conversion of expression (as defined in section 15.18.1.1 of The Java&trade; Language Specification), regardless of the type of expression."
java.lang.BootstrapMethodError,BootstrapMethodError,"Thrown to indicate that an invokedynamic instruction has failed to find its bootstrap method, or the bootstrap method has failed to provide a call site with a target of the correct method type."
java.lang.ClassCastException,ClassCastException,"Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance. For example, the following code generates a ClassCastException:      Object x = new Integer(0);     System.out.println((String)x); "
java.lang.ClassCircularityError,ClassCircularityError,"Thrown when the Java Virtual Machine detects a circularity in the superclass hierarchy of a class being loaded."
java.lang.ClassFormatError,ClassFormatError,"Thrown when the Java Virtual Machine attempts to read a class file and determines that the file is malformed or otherwise cannot be interpreted as a class file."
java.lang.ClassNotFoundException,ClassNotFoundException,"Thrown when an application tries to load in a class through its string name using:  The forName method in class Class. The findSystemClass method in class     ClassLoader . The loadClass method in class ClassLoader.   but no definition for the class with the specified name could be found. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "optional exception that was raised while loading the class" that may be provided at construction time and accessed via the getException() method is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy method.""
java.lang.CloneNotSupportedException,CloneNotSupportedException,"Thrown to indicate that the clone method in class Object has been called to clone an object, but that the object's class does not implement the Cloneable interface.  Applications that override the clone method can also throw this exception to indicate that an object could not or should not be cloned."
java.lang.EnumConstantNotPresentException,EnumConstantNotPresentException,"Thrown when an application tries to access an enum constant by name and the enum type contains no constant with the specified name. This exception can be thrown by the API used to read annotations reflectively."
java.lang.Error,Error,"An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions. The ThreadDeath error, though a "normal" condition, is also a subclass of Error because most applications should not try to catch it.  A method is not required to declare in its throws clause any subclasses of Error that might be thrown during the execution of the method but not caught, since these errors are abnormal conditions that should never occur. That is, Error and its subclasses are regarded as unchecked exceptions for the purposes of compile-time checking of exceptions."
java.lang.Exception,Exception,"The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch. The class Exception and any subclasses that are not also subclasses of RuntimeException are checked exceptions.  Checked exceptions need to be declared in a method or constructor's throws clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary."
java.lang.ExceptionInInitializerError,ExceptionInInitializerError,"Signals that an unexpected exception has occurred in a static initializer. An ExceptionInInitializerError is thrown to indicate that an exception occurred during evaluation of a static initializer or the initializer for a static variable. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "saved throwable object" that may be provided at construction time and accessed via the getException() method is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy method.""
java.lang.IllegalAccessError,IllegalAccessError,"Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to.  Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed."
java.lang.IllegalAccessException,IllegalAccessException,"An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor."
java.lang.IllegalArgumentException,IllegalArgumentException,"Thrown to indicate that a method has been passed an illegal or inappropriate argument."
java.lang.IllegalMonitorStateException,IllegalMonitorStateException,"Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor."
java.lang.IllegalStateException,IllegalStateException,"Signals that a method has been invoked at an illegal or inappropriate time.  In other words, the Java environment or Java application is not in an appropriate state for the requested operation."
java.lang.IllegalThreadStateException,IllegalThreadStateException,"Thrown to indicate that a thread is not in an appropriate state for the requested operation. See, for example, the suspend and resume methods in class Thread."
java.lang.IncompatibleClassChangeError,IncompatibleClassChangeError,"Thrown when an incompatible class change has occurred to some class definition. The definition of some class, on which the currently executing method depends, has since changed."
java.lang.IndexOutOfBoundsException,IndexOutOfBoundsException,"Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range.  Applications can subclass this class to indicate similar exceptions."
java.lang.InstantiationError,InstantiationError,"Thrown when an application tries to use the Java new construct to instantiate an abstract class or an interface.  Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed."
java.lang.InstantiationException,InstantiationException,"Thrown when an application tries to create an instance of a class using the newInstance method in class Class, but the specified class object cannot be instantiated.  The instantiation can fail for a variety of reasons including but not limited to:   the class object represents an abstract class, an interface,      an array class, a primitive type, or void  the class has no nullary constructor"
java.lang.instrument.IllegalClassFormatException,IllegalClassFormatException,"Thrown by an implementation of ClassFileTransformer.transform when its input parameters are invalid. This may occur either because the initial class file bytes were invalid or a previously applied transform corrupted the bytes."
java.lang.instrument.UnmodifiableClassException,UnmodifiableClassException,"Thrown by an implementation of Instrumentation.redefineClasses when one of the specified classes cannot be modified."
java.lang.InternalError,InternalError,"Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine."
java.lang.InterruptedException,InterruptedException,"Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception.  The following code can be used to achieve this effect:   if (Thread.interrupted())  // Clears interrupted status!      throw new InterruptedException(); "
java.lang.invoke.LambdaConversionException,LambdaConversionException,"LambdaConversionException"
java.lang.invoke.WrongMethodTypeException,WrongMethodTypeException,"Thrown to indicate that code has attempted to call a method handle via the wrong method type.  As with the bytecode representation of normal Java method calls, method handle calls are strongly typed to a specific type descriptor associated with a call site.  This exception may also be thrown when two method handles are composed, and the system detects that their types cannot be matched up correctly.  This amounts to an early evaluation of the type mismatch, at method handle construction time, instead of when the mismatched method handle is called."
java.lang.LinkageError,LinkageError,"Subclasses of LinkageError indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class."
java.lang.NegativeArraySizeException,NegativeArraySizeException,"Thrown if an application tries to create an array with negative size."
java.lang.NoClassDefFoundError,NoClassDefFoundError,"Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the new expression) and no definition of the class could be found.  The searched-for class definition existed when the currently executing class was compiled, but the definition can no longer be found."
java.lang.NoSuchFieldError,NoSuchFieldError,"Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field.  Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed."
java.lang.NoSuchFieldException,NoSuchFieldException,"Signals that the class doesn't have a field of a specified name."
java.lang.NoSuchMethodError,NoSuchMethodError,"Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method.  Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed."
java.lang.NoSuchMethodException,NoSuchMethodException,"Thrown when a particular method cannot be found."
java.lang.NullPointerException,NullPointerException,"Thrown when an application attempts to use null in a case where an object is required. These include:  Calling the instance method of a null object. Accessing or modifying the field of a null object. Taking the length of null as if it were an array. Accessing or modifying the slots of null as if it     were an array. Throwing null as if it were a Throwable     value.   Applications should throw instances of this class to indicate other illegal uses of the null object. NullPointerException objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable."
java.lang.NumberFormatException,NumberFormatException,"Thrown to indicate that the application has attempted to convert a string to one of the numeric types, but that the string does not have the appropriate format."
java.lang.OutOfMemoryError,OutOfMemoryError,"Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector. OutOfMemoryError objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable."
java.lang.reflect.GenericSignatureFormatError,GenericSignatureFormatError,"Thrown when a syntactically malformed signature attribute is encountered by a reflective method that needs to interpret the generic signature information for a type, method or constructor."
java.lang.reflect.InvocationTargetException,InvocationTargetException,"InvocationTargetException is a checked exception that wraps an exception thrown by an invoked method or constructor. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "target exception" that is provided at construction time and accessed via the getTargetException() method is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy method.""
java.lang.reflect.MalformedParameterizedTypeException,MalformedParameterizedTypeException,"Thrown when a semantically malformed parameterized type is encountered by a reflective method that needs to instantiate it. For example, if the number of type arguments to a parameterized type is wrong."
java.lang.reflect.MalformedParametersException,MalformedParametersException,"Thrown when the java.lang.reflect package attempts to read method parameters from a class file and determines that one or more parameters are malformed. The following is a list of conditions under which this exception can be thrown:   The number of parameters (parameter_count) is wrong for the method  A constant pool index is out of bounds.  A constant pool index does not refer to a UTF-8 entry  A parameter's name is "", or contains an illegal character  The flags field contains an illegal flag (something other than     FINAL, SYNTHETIC, or MANDATED)  See Executable.getParameters() for more information."
java.lang.reflect.UndeclaredThrowableException,UndeclaredThrowableException,"Thrown by a method invocation on a proxy instance if its invocation handler's invoke method throws a checked exception (a Throwable that is not assignable to RuntimeException or Error) that is not assignable to any of the exception types declared in the throws clause of the method that was invoked on the proxy instance and dispatched to the invocation handler. An UndeclaredThrowableException instance contains the undeclared checked exception that was thrown by the invocation handler, and it can be retrieved with the getUndeclaredThrowable() method. UndeclaredThrowableException extends RuntimeException, so it is an unchecked exception that wraps a checked exception. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "undeclared checked exception that was thrown by the invocation handler" that may be provided at construction time and accessed via the getUndeclaredThrowable() method is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy method.""
java.lang.ReflectiveOperationException,ReflectiveOperationException,"Common superclass of exceptions thrown by reflective operations in core reflection."
java.lang.RuntimeException,RuntimeException,"RuntimeException is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine. RuntimeException and its subclasses are unchecked exceptions.  Unchecked exceptions do not need to be declared in a method or constructor's throws clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary."
java.lang.SecurityException,SecurityException,"Thrown by the security manager to indicate a security violation."
java.lang.StackOverflowError,StackOverflowError,"Thrown when a stack overflow occurs because an application recurses too deeply."
java.lang.StringIndexOutOfBoundsException,StringIndexOutOfBoundsException,"Thrown by String methods to indicate that an index is either negative or greater than the size of the string.  For some methods such as the charAt method, this exception also is thrown when the index is equal to the size of the string."
java.lang.Thread.UncaughtExceptionHandler,Thread.UncaughtExceptionHandler,"Interface for handlers invoked when a Thread abruptly terminates due to an uncaught exception. When a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its UncaughtExceptionHandler using Thread.getUncaughtExceptionHandler() and will invoke the handler's uncaughtException method, passing the thread and the exception as arguments. If a thread has not had its UncaughtExceptionHandler explicitly set, then its ThreadGroup object acts as its UncaughtExceptionHandler. If the ThreadGroup object has no special requirements for dealing with the exception, it can forward the invocation to the default uncaught exception handler."
java.lang.TypeNotPresentException,TypeNotPresentException,"Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found.   This exception differs from ClassNotFoundException in that ClassNotFoundException is a checked exception, whereas this exception is unchecked. Note that this exception may be used when undefined type variables are accessed as well as when types (e.g., classes, interfaces or annotation types) are loaded. In particular, this exception can be thrown by the API used to read annotations reflectively."
java.lang.UnknownError,UnknownError,"Thrown when an unknown but serious exception has occurred in the Java Virtual Machine."
java.lang.UnsatisfiedLinkError,UnsatisfiedLinkError,"Thrown if the Java Virtual Machine cannot find an appropriate native-language definition of a method declared native."
java.lang.UnsupportedClassVersionError,UnsupportedClassVersionError,"Thrown when the Java Virtual Machine attempts to read a class file and determines that the major and minor version numbers in the file are not supported."
java.lang.UnsupportedOperationException,UnsupportedOperationException,"Thrown to indicate that the requested operation is not supported. This class is a member of the  Java Collections Framework."
java.lang.VerifyError,VerifyError,"Thrown when the "verifier" detects that a class file, though well formed, contains some sort of internal inconsistency or security problem."
java.lang.VirtualMachineError,VirtualMachineError,"Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating."
java.net.BindException,BindException,"Signals that an error occurred while attempting to bind a socket to a local address and port.  Typically, the port is in use, or the requested local address could not be assigned."
java.net.ConnectException,ConnectException,"Signals that an error occurred while attempting to connect a socket to a remote address and port.  Typically, the connection was refused remotely (e.g., no process is listening on the remote address/port)."
java.net.HttpRetryException,HttpRetryException,"Thrown to indicate that a HTTP request needs to be retried but cannot be retried automatically, due to streaming mode being enabled."
java.net.MalformedURLException,MalformedURLException,"Thrown to indicate that a malformed URL has occurred. Either no legal protocol could be found in a specification string or the string could not be parsed."
java.net.NoRouteToHostException,NoRouteToHostException,"Signals that an error occurred while attempting to connect a socket to a remote address and port.  Typically, the remote host cannot be reached because of an intervening firewall, or if an intermediate router is down."
java.net.PortUnreachableException,PortUnreachableException,"Signals that an ICMP Port Unreachable message has been received on a connected datagram."
java.net.ProtocolException,ProtocolException,"Thrown to indicate that there is an error in the underlying protocol, such as a TCP error."
java.net.SocketException,SocketException,"Thrown to indicate that there is an error creating or accessing a Socket."
java.net.SocketTimeoutException,SocketTimeoutException,"Signals that a timeout has occurred on a socket read or accept."
java.net.UnknownHostException,UnknownHostException,"Thrown to indicate that the IP address of a host could not be determined."
java.net.UnknownServiceException,UnknownServiceException,"Thrown to indicate that an unknown service exception has occurred. Either the MIME type returned by a URL connection does not make sense, or the application is attempting to write to a read-only URL connection."
java.net.URISyntaxException,URISyntaxException,"Checked exception thrown to indicate that a string could not be parsed as a URI reference."
java.nio.BufferOverflowException,BufferOverflowException,"Unchecked exception thrown when a relative put operation reaches the target buffer's limit."
java.nio.BufferUnderflowException,BufferUnderflowException,"Unchecked exception thrown when a relative get operation reaches the source buffer's limit."
java.nio.channels.AcceptPendingException,AcceptPendingException,"Unchecked exception thrown when an attempt is made to initiate an accept operation on a channel and a previous accept operation has not completed."
java.nio.channels.AlreadyBoundException,AlreadyBoundException,"Unchecked exception thrown when an attempt is made to bind the socket a network oriented channel that is already bound."
java.nio.channels.AlreadyConnectedException,AlreadyConnectedException,"Unchecked exception thrown when an attempt is made to connect a SocketChannel that is already connected."
java.nio.channels.AsynchronousCloseException,AsynchronousCloseException,"Checked exception received by a thread when another thread closes the channel or the part of the channel upon which it is blocked in an I/O operation."
java.nio.channels.CancelledKeyException,CancelledKeyException,"Unchecked exception thrown when an attempt is made to use a selection key that is no longer valid."
java.nio.channels.ClosedByInterruptException,ClosedByInterruptException,"Checked exception received by a thread when another thread interrupts it while it is blocked in an I/O operation upon a channel.  Before this exception is thrown the channel will have been closed and the interrupt status of the previously-blocked thread will have been set."
java.nio.channels.ClosedChannelException,ClosedChannelException,"Checked exception thrown when an attempt is made to invoke or complete an I/O operation upon channel that is closed, or at least closed to that operation.  That this exception is thrown does not necessarily imply that the channel is completely closed.  A socket channel whose write half has been shut down, for example, may still be open for reading."
java.nio.channels.ClosedSelectorException,ClosedSelectorException,"Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a closed selector."
java.nio.channels.ConnectionPendingException,ConnectionPendingException,"Unchecked exception thrown when an attempt is made to connect a SocketChannel for which a non-blocking connection operation is already in progress."
java.nio.channels.FileLockInterruptionException,FileLockInterruptionException,"Checked exception received by a thread when another thread interrupts it while it is waiting to acquire a file lock.  Before this exception is thrown the interrupt status of the previously-blocked thread will have been set."
java.nio.channels.IllegalBlockingModeException,IllegalBlockingModeException,"Unchecked exception thrown when a blocking-mode-specific operation is invoked upon a channel in the incorrect blocking mode."
java.nio.channels.IllegalChannelGroupException,IllegalChannelGroupException,"Unchecked exception thrown when an attempt is made to open a channel in a group that was not created by the same provider."
java.nio.channels.IllegalSelectorException,IllegalSelectorException,"Unchecked exception thrown when an attempt is made to register a channel with a selector that was not created by the provider that created the channel."
java.nio.channels.InterruptedByTimeoutException,InterruptedByTimeoutException,"Checked exception received by a thread when a timeout elapses before an asynchronous operation completes."
java.nio.channels.NoConnectionPendingException,NoConnectionPendingException,"Unchecked exception thrown when the finishConnect method of a SocketChannel is invoked without first successfully invoking its connect method."
java.nio.channels.NonReadableChannelException,NonReadableChannelException,"Unchecked exception thrown when an attempt is made to read from a channel that was not originally opened for reading."
java.nio.channels.NonWritableChannelException,NonWritableChannelException,"Unchecked exception thrown when an attempt is made to write to a channel that was not originally opened for writing."
java.nio.channels.NotYetBoundException,NotYetBoundException,"Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a server socket channel that is not yet bound."
java.nio.channels.NotYetConnectedException,NotYetConnectedException,"Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a socket channel that is not yet connected."
java.nio.channels.OverlappingFileLockException,OverlappingFileLockException,"Unchecked exception thrown when an attempt is made to acquire a lock on a region of a file that overlaps a region already locked by the same Java virtual machine, or when another thread is already waiting to lock an overlapping region of the same file."
java.nio.channels.ReadPendingException,ReadPendingException,"Unchecked exception thrown when an attempt is made to read from an asynchronous socket channel and a previous read has not completed."
java.nio.channels.ShutdownChannelGroupException,ShutdownChannelGroupException,"Unchecked exception thrown when an attempt is made to construct a channel in  a group that is shutdown or the completion handler for an I/O operation  cannot be invoked because the channel group has terminated."
java.nio.channels.UnresolvedAddressException,UnresolvedAddressException,"Unchecked exception thrown when an attempt is made to invoke a network operation upon an unresolved socket address."
java.nio.channels.UnsupportedAddressTypeException,UnsupportedAddressTypeException,"Unchecked exception thrown when an attempt is made to bind or connect to a socket address of a type that is not supported."
java.nio.channels.WritePendingException,WritePendingException,"Unchecked exception thrown when an attempt is made to write to an asynchronous socket channel and a previous write has not completed."
java.nio.charset.CharacterCodingException,CharacterCodingException,"Checked exception thrown when a character encoding or decoding error occurs."
java.nio.charset.CoderMalfunctionError,CoderMalfunctionError,"Error thrown when the decodeLoop method of a CharsetDecoder, or the encodeLoop method of a CharsetEncoder, throws an unexpected exception."
java.nio.charset.CodingErrorAction,CodingErrorAction,"A typesafe enumeration for coding-error actions.  Instances of this class are used to specify how malformed-input and unmappable-character errors are to be handled by charset decoders and encoders.  "
java.nio.charset.IllegalCharsetNameException,IllegalCharsetNameException,"Unchecked exception thrown when a string that is not a legal charset name is used as such."
java.nio.charset.MalformedInputException,MalformedInputException,"Checked exception thrown when an input byte sequence is not legal for given charset, or an input character sequence is not a legal sixteen-bit Unicode sequence."
java.nio.charset.UnmappableCharacterException,UnmappableCharacterException,"Checked exception thrown when an input character (or byte) sequence is valid but cannot be mapped to an output byte (or character) sequence."
java.nio.charset.UnsupportedCharsetException,UnsupportedCharsetException,"Unchecked exception thrown when no support is available for a requested charset."
java.nio.file.AccessDeniedException,AccessDeniedException,"Checked exception thrown when a file system operation is denied, typically due to a file permission or other access check.  This exception is not related to the AccessControlException or SecurityException thrown by access controllers or security managers when access to a file is denied."
java.nio.file.AtomicMoveNotSupportedException,AtomicMoveNotSupportedException,"Checked exception thrown when a file cannot be moved as an atomic file system operation."
java.nio.file.attribute.UserPrincipalNotFoundException,UserPrincipalNotFoundException,"Checked exception thrown when a lookup of UserPrincipal fails because the principal does not exist."
java.nio.file.ClosedDirectoryStreamException,ClosedDirectoryStreamException,"Unchecked exception thrown when an attempt is made to invoke an operation on a directory stream that is closed."
java.nio.file.ClosedFileSystemException,ClosedFileSystemException,"Unchecked exception thrown when an attempt is made to invoke an operation on a file and the file system is closed."
java.nio.file.ClosedWatchServiceException,ClosedWatchServiceException,"Unchecked exception thrown when an attempt is made to invoke an operation on a watch service that is closed."
java.nio.file.DirectoryIteratorException,DirectoryIteratorException,"Runtime exception thrown if an I/O error is encountered when iterating over the entries in a directory. The I/O error is retrieved as an IOException using the getCause() method."
java.nio.file.DirectoryNotEmptyException,DirectoryNotEmptyException,"Checked exception thrown when a file system operation fails because a directory is not empty."
java.nio.file.FileAlreadyExistsException,FileAlreadyExistsException,"Checked exception thrown when an attempt is made to create a file or directory and a file of that name already exists."
java.nio.file.FileSystemAlreadyExistsException,FileSystemAlreadyExistsException,"Runtime exception thrown when an attempt is made to create a file system that already exists."
java.nio.file.FileSystemException,FileSystemException,"Thrown when a file system operation fails on one or two files. This class is the general class for file system exceptions."
java.nio.file.FileSystemLoopException,FileSystemLoopException,"Checked exception thrown when a file system loop, or cycle, is encountered."
java.nio.file.FileSystemNotFoundException,FileSystemNotFoundException,"Runtime exception thrown when a file system cannot be found."
java.nio.file.InvalidPathException,InvalidPathException,"Unchecked exception thrown when path string cannot be converted into a Path because the path string contains invalid characters, or the path string is invalid for other file system specific reasons."
java.nio.file.NoSuchFileException,NoSuchFileException,"Checked exception thrown when an attempt is made to access a file that does not exist."
java.nio.file.NotDirectoryException,NotDirectoryException,"Checked exception thrown when a file system operation, intended for a directory, fails because the file is not a directory."
java.nio.file.NotLinkException,NotLinkException,"Checked exception thrown when a file system operation fails because a file is not a symbolic link."
java.nio.file.ProviderMismatchException,ProviderMismatchException,"Unchecked exception thrown when an attempt is made to invoke a method on an object created by one file system provider with a parameter created by a different file system provider."
java.nio.file.ProviderNotFoundException,ProviderNotFoundException,"Runtime exception thrown when a provider of the required type cannot be found."
java.nio.file.ReadOnlyFileSystemException,ReadOnlyFileSystemException,"Unchecked exception thrown when an attempt is made to update an object associated with a read-only FileSystem."
java.nio.InvalidMarkException,InvalidMarkException,"Unchecked exception thrown when an attempt is made to reset a buffer when its mark is not defined."
java.nio.ReadOnlyBufferException,ReadOnlyBufferException,"Unchecked exception thrown when a content-mutation method such as put or compact is invoked upon a read-only buffer."
java.rmi.AccessException,AccessException,"An AccessException is thrown by certain methods of the java.rmi.Naming class (specifically bind, rebind, and unbind) and methods of the java.rmi.activation.ActivationSystem interface to indicate that the caller does not have permission to perform the action requested by the method call.  If the method was invoked from a non-local host, then an AccessException is thrown."
java.rmi.activation.ActivateFailedException,ActivateFailedException,"This exception is thrown by the RMI runtime when activation fails during a remote call to an activatable object."
java.rmi.activation.ActivationException,ActivationException,"General exception used by the activation interfaces. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "detail exception" that may be provided at construction time and accessed via the public detail field is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy field." Invoking the method Throwable.initCause(Throwable) on an instance of ActivationException always throws IllegalStateException."
java.rmi.activation.UnknownGroupException,UnknownGroupException,"An UnknownGroupException is thrown by methods of classes and interfaces in the java.rmi.activation package when the ActivationGroupID parameter to the method is determined to be invalid, i.e., not known by the ActivationSystem.  An UnknownGroupException is also thrown if the ActivationGroupID in an ActivationDesc refers to a group that is not registered with the ActivationSystem"
java.rmi.activation.UnknownObjectException,UnknownObjectException,"An UnknownObjectException is thrown by methods of classes and interfaces in the java.rmi.activation package when the ActivationID parameter to the method is determined to be invalid.  An ActivationID is invalid if it is not currently known by the ActivationSystem.  An ActivationID is obtained by the ActivationSystem.registerObject method. An ActivationID is also obtained during the Activatable.register call."
java.rmi.AlreadyBoundException,AlreadyBoundException,"An AlreadyBoundException is thrown if an attempt is made to bind an object in the registry to a name that already has an associated binding."
java.rmi.ConnectException,ConnectException,"A ConnectException is thrown if a connection is refused to the remote host for a remote method call."
java.rmi.ConnectIOException,ConnectIOException,"A ConnectIOException is thrown if an IOException occurs while making a connection to the remote host for a remote method call."
java.rmi.MarshalException,MarshalException,"A MarshalException is thrown if a java.io.IOException occurs while marshalling the remote call header, arguments or return value for a remote method call.  A MarshalException is also thrown if the receiver does not support the protocol version of the sender. If a MarshalException occurs during a remote method call, the call may or may not have reached the server.  If the call did reach the server, parameters may have been deserialized.  A call may not be retransmitted after a MarshalException and reliably preserve "at most once" call semantics."
java.rmi.NoSuchObjectException,NoSuchObjectException,"A NoSuchObjectException is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine.  If a NoSuchObjectException occurs attempting to invoke a method on a remote object, the call may be retransmitted and still preserve RMI's "at most once" call semantics. A NoSuchObjectException is also thrown by the method java.rmi.server.RemoteObject.toStub and by the unexportObject methods of java.rmi.server.UnicastRemoteObject and java.rmi.activation.Activatable and"
java.rmi.NotBoundException,NotBoundException,"A NotBoundException is thrown if an attempt is made to lookup or unbind in the registry a name that has no associated binding."
java.rmi.RemoteException,RemoteException,"A RemoteException is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call.  Each method of a remote interface, an interface that extends java.rmi.Remote, must list RemoteException in its throws clause. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "wrapped remote exception" that may be provided at construction time and accessed via the public detail field is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy field." Invoking the method Throwable.initCause(Throwable) on an instance of RemoteException always throws IllegalStateException."
java.rmi.RMISecurityException,RMISecurityException,"An RMISecurityException signals that a security exception has occurred during the execution of one of java.rmi.RMISecurityManager's methods."
java.rmi.server.ExportException,ExportException,"An ExportException is a RemoteException thrown if an attempt to export a remote object fails.  A remote object is exported via the constructors and exportObject methods of java.rmi.server.UnicastRemoteObject and java.rmi.activation.Activatable."
java.rmi.server.ServerCloneException,ServerCloneException,"A ServerCloneException is thrown if a remote exception occurs during the cloning of a UnicastRemoteObject. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "nested exception" that may be provided at construction time and accessed via the public detail field is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy field." Invoking the method Throwable.initCause(Throwable) on an instance of ServerCloneException always throws IllegalStateException."
java.rmi.server.ServerNotActiveException,ServerNotActiveException,"An ServerNotActiveException is an Exception thrown during a call to RemoteServer.getClientHost if the getClientHost method is called outside of servicing a remote method call."
java.rmi.server.SkeletonMismatchException,SkeletonMismatchException,"This exception is thrown when a call is received that does not match the available skeleton.  It indicates either that the remote method names or signatures in this interface have changed or that the stub class used to make the call and the skeleton receiving the call were not generated by the same version of the stub compiler (rmic)."
java.rmi.server.SkeletonNotFoundException,SkeletonNotFoundException,"A SkeletonNotFoundException is thrown if the Skeleton corresponding to the remote object being exported is not found.  Skeletons are no longer required, so this exception is never thrown."
java.rmi.server.SocketSecurityException,SocketSecurityException,"An obsolete subclass of ExportException."
java.rmi.ServerError,ServerError,"A ServerError is thrown as a result of a remote method invocation when an Error is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A ServerError instance contains the original Error that occurred as its cause."
java.rmi.ServerException,ServerException,"A ServerException is thrown as a result of a remote method invocation when a RemoteException is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself. A ServerException instance contains the original RemoteException that occurred as its cause."
java.rmi.ServerRuntimeException,ServerRuntimeException,"From a server executing on JDK&nbsp;1.1, a ServerRuntimeException is thrown as a result of a remote method invocation when a RuntimeException is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A ServerRuntimeException instance contains the original RuntimeException that occurred as its cause. A ServerRuntimeException is not thrown from servers executing on the Java 2 platform v1.2 or later versions."
java.rmi.StubNotFoundException,StubNotFoundException,"A StubNotFoundException is thrown if a valid stub class could not be found for a remote object when it is exported. A StubNotFoundException may also be thrown when an activatable object is registered via the java.rmi.activation.Activatable.register method."
java.rmi.UnexpectedException,UnexpectedException,"An UnexpectedException is thrown if the client of a remote method call receives, as a result of the call, a checked exception that is not among the checked exception types declared in the throws clause of the method in the remote interface."
java.rmi.UnknownHostException,UnknownHostException,"An UnknownHostException is thrown if a java.net.UnknownHostException occurs while creating a connection to the remote host for a remote method call."
java.rmi.UnmarshalException,UnmarshalException,"An UnmarshalException can be thrown while unmarshalling the parameters or results of a remote method call if any of the following conditions occur:   if an exception occurs while unmarshalling the call header  if the protocol for the return value is invalid  if a java.io.IOException occurs unmarshalling parameters (on the server side) or the return value (on the client side).  if a java.lang.ClassNotFoundException occurs during unmarshalling parameters or return values  if no skeleton can be loaded on the server-side; note that skeletons are required in the 1.1 stub protocol, but not in the 1.2 stub protocol.  if the method hash is invalid (i.e., missing method).  if there is a failure to create a remote reference object for a remote object's stub when it is unmarshalled. "
java.security.AccessControlException,AccessControlException," This exception is thrown by the AccessController to indicate that a requested access (to a critical system resource such as the file system or the network) is denied.  The reason to deny access can vary.  For example, the requested permission might be of an incorrect type,  contain an invalid value, or request access that is not allowed according to the security policy.  Such information should be given whenever possible at the time the exception is thrown."
java.security.acl.AclNotFoundException,AclNotFoundException,"This is an exception that is thrown whenever a reference is made to a non-existent ACL (Access Control List)."
java.security.acl.LastOwnerException,LastOwnerException,"This is an exception that is thrown whenever an attempt is made to delete the last owner of an Access Control List."
java.security.acl.NotOwnerException,NotOwnerException,"This is an exception that is thrown whenever the modification of an object (such as an Access Control List) is only allowed to be done by an owner of the object, but the Principal attempting the modification is not an owner."
java.security.cert.CertificateEncodingException,CertificateEncodingException,"Certificate Encoding Exception. This is thrown whenever an error occurs while attempting to encode a certificate."
java.security.cert.CertificateException,CertificateException,"This exception indicates one of a variety of certificate problems."
java.security.cert.CertificateExpiredException,CertificateExpiredException,"Certificate Expired Exception. This is thrown whenever the current Date or the specified Date is after the notAfter date/time specified in the validity period of the certificate."
java.security.cert.CertificateNotYetValidException,CertificateNotYetValidException,"Certificate is not yet valid exception. This is thrown whenever the current Date or the specified Date is before the notBefore date/time in the Certificate validity period."
java.security.cert.CertificateParsingException,CertificateParsingException,"Certificate Parsing Exception. This is thrown whenever an invalid DER-encoded certificate is parsed or unsupported DER features are found in the Certificate."
java.security.cert.CertificateRevokedException,CertificateRevokedException,"An exception that indicates an X.509 certificate is revoked. A CertificateRevokedException contains additional information about the revoked certificate, such as the date on which the certificate was revoked and the reason it was revoked."
java.security.cert.CertPathBuilderException,CertPathBuilderException,"An exception indicating one of a variety of problems encountered when building a certification path with a CertPathBuilder.  A CertPathBuilderException provides support for wrapping exceptions. The getCause method returns the throwable, if any, that caused this exception to be thrown.  Concurrent Access  Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."
java.security.cert.CertPathValidatorException.BasicReason,CertPathValidatorException.BasicReason,"The BasicReason enumerates the potential reasons that a certification path of any type may be invalid."
java.security.cert.CertPathValidatorException,CertPathValidatorException,"An exception indicating one of a variety of problems encountered when validating a certification path.  A CertPathValidatorException provides support for wrapping exceptions. The getCause method returns the throwable, if any, that caused this exception to be thrown.  A CertPathValidatorException may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the getCertPath, getIndex, and getReason methods to retrieve this information.  Concurrent Access  Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."
java.security.cert.CertPathValidatorException.Reason,CertPathValidatorException.Reason,"The reason the validation algorithm failed."
java.security.cert.CertStoreException,CertStoreException,"An exception indicating one of a variety of problems retrieving certificates and CRLs from a CertStore.  A CertStoreException provides support for wrapping exceptions. The getCause method returns the throwable, if any, that caused this exception to be thrown.  Concurrent Access  Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."
java.security.cert.CRLException,CRLException,"CRL (Certificate Revocation List) Exception."
java.security.DigestException,DigestException,"This is the generic Message Digest exception."
java.security.GeneralSecurityException,GeneralSecurityException,"The GeneralSecurityException class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it."
java.security.InvalidAlgorithmParameterException,InvalidAlgorithmParameterException,"This is the exception for invalid or inappropriate algorithm parameters."
java.security.InvalidKeyException,InvalidKeyException,"This is the exception for invalid Keys (invalid encoding, wrong length, uninitialized, etc)."
java.security.InvalidParameterException,InvalidParameterException,"This exception, designed for use by the JCA/JCE engine classes, is thrown when an invalid parameter is passed to a method."
java.security.KeyException,KeyException,"This is the basic key exception."
java.security.KeyManagementException,KeyManagementException,"This is the general key management exception for all operations dealing with key management. Examples of subclasses of KeyManagementException that developers might create for giving more detailed information could include:  KeyIDConflictException KeyAuthorizationFailureException ExpiredKeyException "
java.security.KeyStoreException,KeyStoreException,"This is the generic KeyStore exception."
java.security.NoSuchAlgorithmException,NoSuchAlgorithmException,"This exception is thrown when a particular cryptographic algorithm is requested but is not available in the environment."
java.security.NoSuchProviderException,NoSuchProviderException,"This exception is thrown when a particular security provider is requested but is not available in the environment."
java.security.PrivilegedActionException,PrivilegedActionException,"This exception is thrown by doPrivileged(PrivilegedExceptionAction) and doPrivileged(PrivilegedExceptionAction, AccessControlContext context) to indicate that the action being performed threw a checked exception.  The exception thrown by the action can be obtained by calling the getException method.  In effect, an PrivilegedActionException is a "wrapper" for an exception thrown by a privileged action. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The "exception thrown by the privileged computation" that is provided at construction time and accessed via the getException() method is now known as the cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned "legacy method.""
java.security.PrivilegedExceptionAction,PrivilegedExceptionAction,"Performs the computation.  This method will be called by AccessController.doPrivileged after enabling privileges."
java.security.ProviderException,ProviderException,"A runtime exception for Provider exceptions (such as misconfiguration errors or unrecoverable internal errors), which may be subclassed by Providers to throw specialized, provider-specific runtime errors."
java.security.SignatureException,SignatureException,"This is the generic Signature exception."
java.security.spec.InvalidKeySpecException,InvalidKeySpecException,"This is the exception for invalid key specifications."
java.security.spec.InvalidParameterSpecException,InvalidParameterSpecException,"This is the exception for invalid parameter specifications."
java.security.UnrecoverableEntryException,UnrecoverableEntryException,"This exception is thrown if an entry in the keystore cannot be recovered."
java.security.UnrecoverableKeyException,UnrecoverableKeyException,"This exception is thrown if a key in the keystore cannot be recovered."
java.sql.BatchUpdateException,BatchUpdateException,"The subclass of SQLException thrown when an error occurs during a batch update operation.  In addition to the information provided by SQLException, a BatchUpdateException provides the update counts for all commands that were executed successfully during the batch update, that is, all commands that were executed before the error occurred.  The order of elements in an array of update counts corresponds to the order in which commands were added to the batch.  After a command in a batch update fails to execute properly and a BatchUpdateException is thrown, the driver may or may not continue to process the remaining commands in the batch.  If the driver continues processing after a failure, the array returned by the method BatchUpdateException.getUpdateCounts will have an element for every command in the batch rather than only elements for the commands that executed successfully before the error.  In the case where the driver continues processing commands, the array element for any command that failed is Statement.EXECUTE_FAILED.  A JDBC driver implementation should use the constructor BatchUpdateException(String reason, String SQLState, int vendorCode, long []updateCounts,Throwable cause)  instead of constructors that take int[] for the update counts to avoid the possibility of overflow.  If Statement.executeLargeBatch method is invoked it is recommended that getLargeUpdateCounts be called instead of getUpdateCounts in order to avoid a possible overflow of the integer update count."
java.sql.SQLClientInfoException,SQLClientInfoException,"The subclass of SQLException is thrown when one or more client info properties could not be set on a Connection.  In addition to the information provided by SQLException, a SQLClientInfoException provides a list of client info properties that were not set. Some databases do not allow multiple client info properties to be set atomically.  For those databases, it is possible that some of the client info properties had been set even though the Connection.setClientInfo method threw an exception.  An application can use the getFailedProperties  method to retrieve a list of client info properties that were not set.  The properties are identified by passing a MapString,ClientInfoStatus to the appropriate SQLClientInfoException constructor. "
java.sql.SQLDataException,SQLDataException,"The subclass of SQLException thrown when the SQLState class value is '22', or under vendor-specified conditions.  This indicates various data errors, including but not limited to data conversion errors, division by 0, and invalid arguments to functions.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLException,SQLException,"An exception that provides information on a database access error or other errors. Each SQLException provides several kinds of information:     a string describing the error.  This is used as the Java Exception       message, available via the method getMesasge.    a "SQLstate" string, which follows either the XOPEN SQLstate conventions        or the SQL:2003 conventions.       The values of the SQLState string are described in the appropriate spec.       The DatabaseMetaData method getSQLStateType       can be used to discover whether the driver returns the XOPEN type or       the SQL:2003 type.    an integer error code that is specific to each vendor.  Normally this will       be the actual error code returned by the underlying database.    a chain to a next Exception.  This can be used to provide additional       error information.    the causal relationship, if any for this SQLException. "
java.sql.SQLFeatureNotSupportedException,SQLFeatureNotSupportedException,"The subclass of SQLException thrown when the SQLState class value is '0A' ( the value is 'zero' A). This indicates that the JDBC driver does not support an optional JDBC feature. Optional JDBC features can fall into the fallowing categories:no support for an optional featureno support for an optional overloaded methodno support for an optional mode for a method.  The mode for a method isdetermined based on constants passed as parameter values to a method"
java.sql.SQLIntegrityConstraintViolationException,SQLIntegrityConstraintViolationException,"The subclass of SQLException thrown when the SQLState class value is '23', or under vendor-specified conditions. This indicates that an integrity constraint (foreign key, primary key or unique key) has been violated.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLInvalidAuthorizationSpecException,SQLInvalidAuthorizationSpecException,"The subclass of SQLException thrown when the SQLState class value is '28', or under vendor-specified conditions. This indicates that the authorization credentials presented during connection establishment are not valid.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLNonTransientConnectionException,SQLNonTransientConnectionException,"The subclass of SQLException thrown for the SQLState class value '08', or under vendor-specified conditions.  This indicates that the connection operation that failed will not succeed if the operation is retried without the cause of the failure being corrected.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLNonTransientException,SQLNonTransientException,"The subclass of SQLException thrown when an instance where a retry of the same operation would fail unless the cause of the SQLException is corrected."
java.sql.SQLRecoverableException,SQLRecoverableException,"The subclass of SQLException thrown in situations where a previously failed operation might be able to succeed if the application performs  some recovery steps and retries the entire transaction or in the case of a distributed transaction, the transaction branch.  At a minimum, the recovery operation must include closing the current connection and getting a new connection."
java.sql.SQLSyntaxErrorException,SQLSyntaxErrorException,"The subclass of SQLException thrown when the SQLState class value is '42', or under vendor-specified conditions. This indicates that the in-progress query has violated SQL syntax rules.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLTimeoutException,SQLTimeoutException,"The subclass of SQLException thrown when the timeout specified by Statement.setQueryTimeout, DriverManager.setLoginTimeout, DataSource.setLoginTimeout,XADataSource.setLoginTimeout has expired.  This exception does not correspond to a standard SQLState."
java.sql.SQLTransactionRollbackException,SQLTransactionRollbackException,"The subclass of SQLException thrown when the SQLState class value is '40', or under vendor-specified conditions. This indicates that the current statement was automatically rolled back by the database because of deadlock or other transaction serialization failures.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLTransientConnectionException,SQLTransientConnectionException,"The subclass of SQLException for the SQLState class value '08', or under vendor-specified conditions.  This indicates that the connection operation that failed might be able to succeed if the operation is retried without any application-level changes.  Please consult your driver vendor documentation for the vendor-specified conditions for which this Exception may be thrown."
java.sql.SQLTransientException,SQLTransientException,"The subclass of SQLException is thrown in situations where a previously failed operation might be able to succeed when the operation is retried without any intervention by application-level functionality."
java.text.ParseException,ParseException,"Signals that an error has been reached unexpectedly while parsing."
java.time.DateTimeException,DateTimeException,"Exception used to indicate a problem while calculating a date-time.  This exception is used to indicate problems with creating, querying and manipulating date-time objects."
java.time.format.DateTimeParseException,DateTimeParseException,"An exception thrown when an error occurs during parsing.  This exception includes the text being parsed and the error index."
java.time.temporal.UnsupportedTemporalTypeException,UnsupportedTemporalTypeException,"UnsupportedTemporalTypeException indicates that a ChronoField or ChronoUnit is not supported for a Temporal class."
java.time.zone.ZoneRulesException,ZoneRulesException,"Thrown to indicate a problem with time-zone configuration.  This exception is used to indicate a problems with the configured time-zone rules."
java.util.concurrent.BrokenBarrierException,BrokenBarrierException,"Exception thrown when a thread tries to wait upon a barrier that is in a broken state, or which enters the broken state while the thread is waiting."
java.util.concurrent.CancellationException,CancellationException,"Exception indicating that the result of a value-producing task, such as a FutureTask, cannot be retrieved because the task was cancelled."
java.util.concurrent.CompletionException,CompletionException,"Exception thrown when an error or other exception is encountered in the course of completing a result or task."
java.util.concurrent.ExecutionException,ExecutionException,"Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception. This exception can be inspected using the Throwable.getCause() method."
java.util.concurrent.RejectedExecutionException,RejectedExecutionException,"Exception thrown by an Executor when a task cannot be accepted for execution."
java.util.concurrent.TimeoutException,TimeoutException,"Exception thrown when a blocking operation times out.  Blocking operations for which a timeout is specified need a means to indicate that the timeout has occurred. For many such operations it is possible to return a value that indicates timeout; when that is not possible or desirable then TimeoutException should be declared and thrown."
java.util.ConcurrentModificationException,ConcurrentModificationException,"This exception may be thrown by methods that have detected concurrent modification of an object when such modification is not permissible.  For example, it is not generally permissible for one thread to modify a Collection while another thread is iterating over it.  In general, the results of the iteration are undefined under these circumstances.  Some Iterator implementations (including those of all the general purpose collection implementations provided by the JRE) may choose to throw this exception if this behavior is detected.  Iterators that do this are known as fail-fast iterators, as they fail quickly and cleanly, rather that risking arbitrary, non-deterministic behavior at an undetermined time in the future.  Note that this exception does not always indicate that an object has been concurrently modified by a different thread.  If a single thread issues a sequence of method invocations that violates the contract of an object, the object may throw this exception.  For example, if a thread modifies a collection directly while it is iterating over the collection with a fail-fast iterator, the iterator will throw this exception. Note that fail-fast behavior cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification.  Fail-fast operations throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: ConcurrentModificationException should be used only to detect bugs."
java.util.DuplicateFormatFlagsException,DuplicateFormatFlagsException,"Unchecked exception thrown when duplicate flags are provided in the format specifier.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.EmptyStackException,EmptyStackException,"Thrown by methods in the Stack class to indicate that the stack is empty."
java.util.FormatFlagsConversionMismatchException,FormatFlagsConversionMismatchException,"Unchecked exception thrown when a conversion and flag are incompatible.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.FormatterClosedException,FormatterClosedException,"Unchecked exception thrown when the formatter has been closed.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.IllegalFormatCodePointException,IllegalFormatCodePointException,"Unchecked exception thrown when a character with an invalid Unicode code point as defined by Character.isValidCodePoint(int) is passed to the Formatter.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.IllegalFormatConversionException,IllegalFormatConversionException,"Unchecked exception thrown when the argument corresponding to the format specifier is of an incompatible type.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.IllegalFormatException,IllegalFormatException,"Unchecked exception thrown when a format string contains an illegal syntax or a format specifier that is incompatible with the given arguments.  Only explicit subtypes of this exception which correspond to specific errors should be instantiated."
java.util.IllegalFormatFlagsException,IllegalFormatFlagsException,"Unchecked exception thrown when an illegal combination flags is given.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.IllegalFormatPrecisionException,IllegalFormatPrecisionException,"Unchecked exception thrown when the precision is a negative value other than -1, the conversion does not support a precision, or the value is otherwise unsupported."
java.util.IllegalFormatWidthException,IllegalFormatWidthException,"Unchecked exception thrown when the format width is a negative value other than -1 or is otherwise unsupported."
java.util.IllformedLocaleException,IllformedLocaleException,"Thrown by methods in Locale and Locale.Builder to indicate that an argument is not a well-formed BCP 47 tag."
java.util.InputMismatchException,InputMismatchException,"Thrown by a Scanner to indicate that the token retrieved does not match the pattern for the expected type, or that the token is out of range for the expected type."
java.util.InvalidPropertiesFormatException,InvalidPropertiesFormatException,"Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of properties, as per the Properties specification. Note, that although InvalidPropertiesFormatException inherits Serializable interface from Exception, it is not intended to be Serializable. Appropriate serialization methods are implemented to throw NotSerializableException."
java.util.jar.JarException,JarException,"Signals that an error of some sort has occurred while reading from or writing to a JAR file."
java.util.logging.ErrorManager,ErrorManager,"ErrorManager objects can be attached to Handlers to process any error that occurs on a Handler during Logging.  When processing logging output, if a Handler encounters problems then rather than throwing an Exception back to the issuer of the logging call (who is unlikely to be interested) the Handler should call its associated ErrorManager."
java.util.MissingFormatArgumentException,MissingFormatArgumentException,"Unchecked exception thrown when there is a format specifier which does not have a corresponding argument or if an argument index refers to an argument that does not exist.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.MissingFormatWidthException,MissingFormatWidthException,"Unchecked exception thrown when the format width is required.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.MissingResourceException,MissingResourceException,"Signals that a resource is missing."
java.util.NoSuchElementException,NoSuchElementException,"Thrown by various accessor methods to indicate that the element being requested does not exist."
java.util.prefs.BackingStoreException,BackingStoreException,"Thrown to indicate that a preferences operation could not complete because of a failure in the backing store, or a failure to contact the backing store."
java.util.prefs.InvalidPreferencesFormatException,InvalidPreferencesFormatException,"Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of preferences, as per the Preferences specification."
java.util.regex.PatternSyntaxException,PatternSyntaxException,"Unchecked exception thrown to indicate a syntax error in a regular-expression pattern."
java.util.ServiceConfigurationError,ServiceConfigurationError,"Error thrown when something goes wrong while loading a service provider.  This error will be thrown in the following situations:     The format of a provider-configuration file violates the specification;     An IOException occurs while reading a   provider-configuration file;     A concrete provider class named in a provider-configuration file   cannot be found;     A concrete provider class is not a subclass of the service class;       A concrete provider class cannot be instantiated; or    Some other kind of error occurs.  "
java.util.TooManyListenersException,TooManyListenersException," The  TooManyListenersException  Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source.   The presence of a "throws TooManyListenersException" clause on any given concrete implementation of the normally multicast "void addXyzEventListener" event listener registration pattern is used to annotate that interface as implementing a unicast Listener special case, that is, that one and only one Listener may be registered on the particular event listener source concurrently. "
java.util.UnknownFormatConversionException,UnknownFormatConversionException,"Unchecked exception thrown when an unknown conversion is given.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.UnknownFormatFlagsException,UnknownFormatFlagsException,"Unchecked exception thrown when an unknown flag is given.  Unless otherwise specified, passing a null argument to any method or constructor in this class will cause a NullPointerException to be thrown."
java.util.zip.DataFormatException,DataFormatException,"Signals that a data format error has occurred."
java.util.zip.ZipError,ZipError,"Signals that an unrecoverable error has occurred."
java.util.zip.ZipException,ZipException,"Signals that a Zip exception of some sort has occurred."
javax.activation.MimeTypeParseException,MimeTypeParseException,"A class to encapsulate MimeType parsing related exceptions."
javax.activation.UnsupportedDataTypeException,UnsupportedDataTypeException,"Signals that the requested operation does not support the requested data type."
javax.activity.ActivityCompletedException,ActivityCompletedException,"This exception may be thrown on any method for which Activity context is accessed and indicates that ongoing work within the Activity is not possible. This may be because the Activity has been instructed to complete with CompletionStatusFailOnly or has ended as a result of a timeout. This exception will be propagated across ORB boundaries via an org.omg.CORBA.ACTIVITY_COMPLETED system exception. An application should handle this error by attempting to complete the Activity."
javax.activity.ActivityRequiredException,ActivityRequiredException,"This exception is thrown by a container if Activity context is not received on a method for which Activity context is mandatory. This exception indicates a deployment or application configuration error. This exception will be propagated across ORB boundaries via an org.omg.CORBA.ACTIVITY_REQUIRED system exception."
javax.activity.InvalidActivityException,InvalidActivityException,"This exception may be thrown on any method for which Activity context is accessed and indicates that the attempted invocation or the Activity context associated with the attempted invocation is incompatible with the Activity's current state. It may also be thrown by a container if Activity context is received on a method for which Activity context is forbidden. This exception will be propagated across J2EE Activity Service ORB boundaries via an org.omg.CORBA.INVALID_ACTIVITY system exception. An application should handle this error by attempting to complete the Activity."
javax.annotation.processing.FilerException,FilerException,"Indicates a Filer detected an attempt to open a file that would violate the guarantees provided by the Filer.  Those guarantees include not creating the same file more than once, not creating multiple files corresponding to the same type, and not creating files for types with invalid names."
javax.crypto.AEADBadTagException,AEADBadTagException,"This exception is thrown when a Cipher operating in an AEAD mode (such as GCM/CCM) is unable to verify the supplied authentication tag."
javax.crypto.BadPaddingException,BadPaddingException,"This exception is thrown when a particular padding mechanism is expected for the input data but the data is not padded properly."
javax.crypto.ExemptionMechanismException,ExemptionMechanismException,"This is the generic ExemptionMechanism exception."
javax.crypto.IllegalBlockSizeException,IllegalBlockSizeException,"This exception is thrown when the length of data provided to a block cipher is incorrect, i.e., does not match the block size of the cipher."
javax.crypto.NoSuchPaddingException,NoSuchPaddingException,"This exception is thrown when a particular padding mechanism is requested but is not available in the environment."
javax.crypto.ShortBufferException,ShortBufferException,"This exception is thrown when an output buffer provided by the user is too short to hold the operation result."
javax.imageio.IIOException,IIOException,"An exception class used for signaling run-time failure of reading and writing operations.  In addition to a message string, a reference to another Throwable (Error or Exception) is maintained.  This reference, if non-null, refers to the event that caused this exception to occur.  For example, an IOException while reading from a File would be stored there."
javax.imageio.metadata.IIOInvalidTreeException,IIOInvalidTreeException,"An IIOInvalidTreeException is thrown when an attempt by an IIOMetadata object to parse a tree of IIOMetadataNodes fails.  The node that led to the parsing error may be stored.  As with any parsing error, the actual error may occur at a different point that that where it is detected.  The node returned by getOffendingNode should merely be considered as a clue to the actual nature of the problem."
javax.lang.model.element.UnknownAnnotationValueException,UnknownAnnotationValueException,"Indicates that an unknown kind of annotation value was encountered. This can occur if the language evolves and new kinds of annotation values can be stored in an annotation.  May be thrown by an annotation value visitor to indicate that the visitor was created for a prior version of the language."
javax.lang.model.element.UnknownElementException,UnknownElementException,"Indicates that an unknown kind of element was encountered.  This can occur if the language evolves and new kinds of elements are added to the Element hierarchy.  May be thrown by an element visitor to indicate that the visitor was created for a prior version of the language."
javax.lang.model.type.ErrorType,ErrorType,"Represents a class or interface type that cannot be properly modeled. This may be the result of a processing error, such as a missing class file or erroneous source code. Most queries for information derived from such a type (such as its members or its supertype) will not, in general, return meaningful results."
javax.lang.model.type.MirroredTypeException,MirroredTypeException,"Thrown when an application attempts to access the Class object corresponding to a TypeMirror."
javax.lang.model.type.MirroredTypesException,MirroredTypesException,"Thrown when an application attempts to access a sequence of Class objects each corresponding to a TypeMirror."
javax.lang.model.type.UnknownTypeException,UnknownTypeException,"Indicates that an unknown kind of type was encountered.  This can occur if the language evolves and new kinds of types are added to the TypeMirror hierarchy.  May be thrown by a type visitor to indicate that the visitor was created for a prior version of the language."
javax.lang.model.UnknownEntityException,UnknownEntityException,"Superclass of exceptions which indicate that an unknown kind of entity was encountered.  This situation can occur if the language evolves and new kinds of constructs are introduced.  Subclasses of this exception may be thrown by visitors to indicate that the visitor was created for a prior version of the language. A common superclass for those exceptions allows a single catch block to have code handling them uniformly."
javax.management.AttributeNotFoundException,AttributeNotFoundException,"The specified attribute does not exist or cannot be retrieved."
javax.management.BadAttributeValueExpException,BadAttributeValueExpException,"Thrown when an invalid MBean attribute is passed to a query constructing method.  This exception is used internally by JMX during the evaluation of a query.  User code does not usually see it."
javax.management.BadBinaryOpValueExpException,BadBinaryOpValueExpException,"Thrown when an invalid expression is passed to a method for constructing a query.  This exception is used internally by JMX during the evaluation of a query.  User code does not usually see it."
javax.management.BadStringOperationException,BadStringOperationException,"Thrown when an invalid string operation is passed to a method for constructing a query."
javax.management.InstanceAlreadyExistsException,InstanceAlreadyExistsException,"The MBean is already registered in the repository."
javax.management.InstanceNotFoundException,InstanceNotFoundException,"The specified MBean does not exist in the repository."
javax.management.IntrospectionException,IntrospectionException,"An exception occurred during the introspection of an MBean."
javax.management.InvalidApplicationException,InvalidApplicationException,"Thrown when an attempt is made to apply either of the following: A subquery expression to an MBean or a qualified attribute expression to an MBean of the wrong class.  This exception is used internally by JMX during the evaluation of a query.  User code does not usually see it."
javax.management.InvalidAttributeValueException,InvalidAttributeValueException,"The value specified is not valid for the attribute."
javax.management.JMException,JMException,"Exceptions thrown by JMX implementations. It does not include the runtime exceptions."
javax.management.JMRuntimeException,JMRuntimeException,"Runtime exceptions emitted by JMX implementations."
javax.management.ListenerNotFoundException,ListenerNotFoundException,"The specified MBean listener does not exist in the repository."
javax.management.MalformedObjectNameException,MalformedObjectNameException,"The format of the string does not correspond to a valid ObjectName."
javax.management.MBeanException,MBeanException,"Represents "user defined" exceptions thrown by MBean methods in the agent. It "wraps" the actual "user defined" exception thrown. This exception will be built by the MBeanServer when a call to an MBean method results in an unknown exception."
javax.management.MBeanRegistrationException,MBeanRegistrationException,"Wraps exceptions thrown by the preRegister(), preDeregister() methods of the MBeanRegistration interface."
javax.management.modelmbean.InvalidTargetObjectTypeException,InvalidTargetObjectTypeException,"Exception thrown when an invalid target object type is specified. The serialVersionUID of this class is 1190536278266811217L."
javax.management.modelmbean.XMLParseException,XMLParseException,"This exception is thrown when an XML formatted string is being parsed into ModelMBean objects or when XML formatted strings are being created from ModelMBean objects. It is also used to wrapper exceptions from XML parsers that may be used. The serialVersionUID of this class is 3176664577895105181L."
javax.management.monitor.MonitorSettingException,MonitorSettingException,"Exception thrown by the monitor when a monitor setting becomes invalid while the monitor is running.  As the monitor attributes may change at runtime, a check is performed before each observation. If a monitor attribute has become invalid, a monitor setting exception is thrown."
javax.management.NotCompliantMBeanException,NotCompliantMBeanException,"Exception which occurs when trying to register an  object in the MBean server that is not a JMX compliant MBean."
javax.management.openmbean.InvalidKeyException,InvalidKeyException,"This runtime exception is thrown to indicate that a method parameter which was expected to be an item name of a composite data or a row index of a tabular data is not valid."
javax.management.openmbean.InvalidOpenTypeException,InvalidOpenTypeException,"This runtime exception is thrown to indicate that the open type of an open data value is not the one expected."
javax.management.openmbean.KeyAlreadyExistsException,KeyAlreadyExistsException,"This runtime exception is thrown to indicate that the index of a row to be added to a tabular data instance is already used to refer to another row in this tabular data instance."
javax.management.openmbean.OpenDataException,OpenDataException,"This checked exception is thrown when an open type, an open data  or an open MBean metadata info instance could not be constructed because one or more validity constraints were not met."
javax.management.OperationsException,OperationsException,"Represents exceptions thrown in the MBean server when performing operations on MBeans."
javax.management.ReflectionException,ReflectionException,"Represents exceptions thrown in the MBean server when using the java.lang.reflect classes to invoke methods on MBeans. It "wraps" the actual java.lang.Exception thrown."
javax.management.relation.InvalidRelationIdException,InvalidRelationIdException,"This exception is raised when relation id provided for a relation is already used."
javax.management.relation.InvalidRelationServiceException,InvalidRelationServiceException,"This exception is raised when an invalid Relation Service is provided."
javax.management.relation.InvalidRelationTypeException,InvalidRelationTypeException,"Invalid relation type. This exception is raised when, in a relation type, there is already a relation type with that name, or the same name has been used for two different role infos, or no role info provided, or one null role info provided."
javax.management.relation.InvalidRoleInfoException,InvalidRoleInfoException,"This exception is raised when, in a role info, its minimum degree is greater than its maximum degree."
javax.management.relation.InvalidRoleValueException,InvalidRoleValueException,"Role value is invalid. This exception is raised when, in a role, the number of referenced MBeans in given value is less than expected minimum degree, or the number of referenced MBeans in provided value exceeds expected maximum degree, or one referenced MBean in the value is not an Object of the MBean class expected for that role, or an MBean provided for that role does not exist."
javax.management.relation.RelationException,RelationException,"This class is the superclass of any exception which can be raised during relation management."
javax.management.relation.RelationNotFoundException,RelationNotFoundException,"This exception is raised when there is no relation for a given relation id in a Relation Service."
javax.management.relation.RelationServiceNotRegisteredException,RelationServiceNotRegisteredException,"This exception is raised when an access is done to the Relation Service and that one is not registered."
javax.management.relation.RelationTypeNotFoundException,RelationTypeNotFoundException,"This exception is raised when there is no relation type with given name in Relation Service."
javax.management.relation.RoleInfoNotFoundException,RoleInfoNotFoundException,"This exception is raised when there is no role info with given name in a given relation type."
javax.management.relation.RoleNotFoundException,RoleNotFoundException,"This exception is raised when a role in a relation does not exist, or is not readable, or is not settable."
javax.management.remote.JMXProviderException,JMXProviderException,"Exception thrown by JMXConnectorFactory and JMXConnectorServerFactory when a provider exists for the required protocol but cannot be used for some reason."
javax.management.remote.JMXServerErrorException,JMXServerErrorException,"Exception thrown as the result of a remote MBeanServer method invocation when an Error is thrown while processing the invocation in the remote MBean server.  A JMXServerErrorException instance contains the original Error that occurred as its cause."
javax.management.RuntimeErrorException,RuntimeErrorException,"When a java.lang.Error occurs in the agent it should be caught and re-thrown as a RuntimeErrorException."
javax.management.RuntimeMBeanException,RuntimeMBeanException,"Represents runtime exceptions thrown by MBean methods in the agent. It "wraps" the actual java.lang.RuntimeException exception thrown. This exception will be built by the MBeanServer when a call to an MBean method throws a runtime exception."
javax.management.RuntimeOperationsException,RuntimeOperationsException,"Represents runtime exceptions thrown in the agent when performing operations on MBeans. It wraps the actual java.lang.RuntimeException thrown."
javax.management.ServiceNotFoundException,ServiceNotFoundException,"Represents exceptions raised when a requested service is not supported."
javax.naming.AuthenticationException,AuthenticationException,"This exception is thrown when an authentication error occurs while accessing the naming or directory service. An authentication error can happen, for example, when the credentials supplied by the user program is invalid or otherwise fails to authenticate the user to the naming/directory service. If the program wants to handle this exception in particular, it should catch AuthenticationException explicitly before attempting to catch NamingException. After catching AuthenticationException, the program could reattempt the authentication by updating the resolved context's environment properties with the appropriate appropriate credentials.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.AuthenticationNotSupportedException,AuthenticationNotSupportedException,"This exception is thrown when the particular flavor of authentication requested is not supported. For example, if the program is attempting to use strong authentication but the directory/naming supports only simple authentication, this exception would be thrown. Identification of a particular flavor of authentication is provider- and server-specific. It may be specified using specific authentication schemes such those identified using SASL, or a generic authentication specifier (such as "simple" and "strong"). If the program wants to handle this exception in particular, it should catch AuthenticationNotSupportedException explicitly before attempting to catch NamingException. After catching AuthenticationNotSupportedException, the program could reattempt the authentication using a different authentication flavor by updating the resolved context's environment properties accordingly.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.CannotProceedException,CannotProceedException,"This exception is thrown to indicate that the operation reached a point in the name where the operation cannot proceed any further. When performing an operation on a composite name, a naming service provider may reach a part of the name that does not belong to its namespace.  At that point, it can construct a CannotProceedException and then invoke methods provided by javax.naming.spi.NamingManager (such as getContinuationContext()) to locate another provider to continue the operation.  If this is not possible, this exception is raised to the caller of the context operation. If the program wants to handle this exception in particular, it should catch CannotProceedException explicitly before attempting to catch NamingException. A CannotProceedException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify CannotProceedException should lock the object."
javax.naming.CommunicationException,CommunicationException,"This exception is thrown when the client is unable to communicate with the directory or naming service. The inability to communicate with the service might be a result of many factors, such as network partitioning, hardware or interface problems, failures on either the client or server side. This exception is meant to be used to capture such communication problems.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.ConfigurationException,ConfigurationException,"This exception is thrown when there is a configuration problem. This can arise when installation of a provider was not done correctly, or if there are configuration problems with the server, or if configuration information required to access the provider or service is malformed or missing. For example, a request to use SSL as the security protocol when the service provider software was not configured with the SSL component would cause such an exception. Another example is if the provider requires that a URL be specified as one of the environment properties but the client failed to provide it.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.ContextNotEmptyException,ContextNotEmptyException,"This exception is thrown when attempting to destroy a context that is not empty. If the program wants to handle this exception in particular, it should catch ContextNotEmptyException explicitly before attempting to catch NamingException. For example, after catching ContextNotEmptyException, the program might try to remove the contents of the context before reattempting the destroy.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.AttributeInUseException,AttributeInUseException,"This exception is thrown when an operation attempts to add an attribute that already exists.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.AttributeModificationException,AttributeModificationException,"This exception is thrown when an attempt is made to add, or remove, or modify an attribute, its identifier, or its values that conflicts with the attribute's (schema) definition or the attribute's state. It is thrown in response to DirContext.modifyAttributes(). It contains a list of modifications that have not been performed, in the order that they were supplied to modifyAttributes(). If the list is null, none of the modifications were performed successfully. An AttributeModificationException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single AttributeModification instance should lock the object."
javax.naming.directory.InvalidAttributeIdentifierException,InvalidAttributeIdentifierException,"This exception is thrown when an attempt is made to add to create an attribute with an invalid attribute identifier. The validity of an attribute identifier is directory-specific.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.InvalidAttributesException,InvalidAttributesException,"This exception is thrown when an attempt is made to add or modify an attribute set that has been specified incompletely or incorrectly. This could happen, for example, when attempting to add or modify a binding, or to create a new subcontext without specifying all the mandatory attributes required for creation of the object.  Another situation in which this exception is thrown is by specification of incompatible attributes within the same attribute set, or attributes in conflict with that specified by the object's schema.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.InvalidAttributeValueException,InvalidAttributeValueException,"This class is thrown when an attempt is made to add to an attribute a value that conflicts with the attribute's schema definition.  This could happen, for example, if attempting to add an attribute with no value when the attribute is required to have at least one value, or if attempting to add more than one value to a single valued-attribute, or if attempting to add a value that conflicts with the syntax of the attribute.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.InvalidSearchControlsException,InvalidSearchControlsException,"This exception is thrown when the specification of the SearchControls for a search operation is invalid. For example, if the scope is set to a value other than OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE, this exception is thrown.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.InvalidSearchFilterException,InvalidSearchFilterException,"This exception is thrown when the specification of a search filter is invalid.  The expression of the filter may be invalid, or there may be a problem with one of the parameters passed to the filter.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.NoSuchAttributeException,NoSuchAttributeException,"This exception is thrown when attempting to access an attribute that does not exist.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.directory.SchemaViolationException,SchemaViolationException,"This exception is thrown when a method in some ways violates the schema. An example of schema violation is modifying attributes of an object that violates the object's schema definition. Another example is renaming or moving an object to a part of the namespace that violates the namespace's schema definition.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.event.NamingExceptionEvent,NamingExceptionEvent,"This class represents an event fired when the procedures/processes used to collect information for notifying listeners of NamingEvents threw a NamingException. This can happen, for example, if the server which the listener is using aborts subsequent to the addNamingListener() call."
javax.naming.InsufficientResourcesException,InsufficientResourcesException,"This exception is thrown when resources are not available to complete the requested operation. This might due to a lack of resources on the server or on the client. There are no restrictions to resource types, as different services might make use of different resources. Such restrictions might be due to physical limits and/or administrative quotas. Examples of limited resources are internal buffers, memory, network bandwidth. InsufficientResourcesException is different from LimitExceededException in that the latter is due to user/system specified limits. See LimitExceededException for details.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.InterruptedNamingException,InterruptedNamingException,"This exception is thrown when the naming operation being invoked has been interrupted. For example, an application might interrupt a thread that is performing a search. If the search supports being interrupted, it will throw InterruptedNamingException. Whether an operation is interruptible and when depends on its implementation (as provided by the service providers). Different implementations have different ways of protecting their resources and objects from being damaged due to unexpected interrupts.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.InvalidNameException,InvalidNameException,"This exception indicates that the name being specified does not conform to the naming syntax of a naming system. This exception is thrown by any of the methods that does name parsing (such as those in Context, DirContext, CompositeName and CompoundName).  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.ldap.LdapReferralException,LdapReferralException,"This abstract class is used to represent an LDAP referral exception. It extends the base ReferralException by providing a getReferralContext() method that accepts request controls. LdapReferralException is an abstract class. Concrete implementations of it determine its synchronization and serialization properties. A Control[] array passed as a parameter to the getReferralContext() method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual Control objects in the array."
javax.naming.LimitExceededException,LimitExceededException,"This exception is thrown when a method terminates abnormally due to a user or system specified limit. This is different from a InsufficientResourceException in that LimitExceededException is due to a user/system specified limit. For example, running out of memory to complete the request would be an insufficient resource. The client asking for 10 answers and getting back 11 is a size limit exception. Examples of these limits include client and server configuration limits such as size, time, number of hops, etc.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.LinkException,LinkException,"This exception is used to describe problems encounter while resolving links. Addition information is added to the base NamingException for pinpointing the problem with the link. Analogous to how NamingException captures name resolution information, LinkException captures "link"-name resolution information pinpointing the problem encountered while resolving a link. All these fields may be null.   Link Resolved Name. Portion of link name that has been resolved.  Link Resolved Object. Object to which resolution of link name proceeded.  Link Remaining Name. Portion of link name that has not been resolved.  Link Explanation. Detail explaining why link resolution failed. A LinkException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single LinkException instance should lock the object."
javax.naming.LinkLoopException,LinkLoopException,"This exception is thrown when a loop was detected will attempting to resolve a link, or an implementation specific limit on link counts has been reached.  Synchronization and serialization issues that apply to LinkException apply directly here."
javax.naming.MalformedLinkException,MalformedLinkException,"This exception is thrown when a malformed link was encountered while resolving or constructing a link.  Synchronization and serialization issues that apply to LinkException apply directly here."
javax.naming.NameAlreadyBoundException,NameAlreadyBoundException,"This exception is thrown by methods to indicate that a binding cannot be added because the name is already bound to another object.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.NameNotFoundException,NameNotFoundException,"This exception is thrown when a component of the name cannot be resolved because it is not bound.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.NamingException,NamingException,"This is the superclass of all exceptions thrown by operations in the Context and DirContext interfaces. The nature of the failure is described by the name of the subclass. This exception captures the information pinpointing where the operation failed, such as where resolution last proceeded to.   Resolved Name. Portion of name that has been resolved.  Resolved Object. Object to which resolution of name proceeded.  Remaining Name. Portion of name that has not been resolved.  Explanation. Detail explaining why name resolution failed.  Root Exception. The exception that caused this naming exception                     to be thrown. null is an acceptable value for any of these fields. When null, it means that no such information has been recorded for that field. A NamingException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single NamingException instance should lock the object. This exception has been retrofitted to conform to the general purpose exception-chaining mechanism.  The root exception (or root cause) is the same object as the cause returned by the Throwable.getCause() method."
javax.naming.NamingSecurityException,NamingSecurityException,"This is the superclass of security-related exceptions thrown by operations in the Context and DirContext interfaces. The nature of the failure is described by the name of the subclass. If the program wants to handle this exception in particular, it should catch NamingSecurityException explicitly before attempting to catch NamingException. A program might want to do this, for example, if it wants to treat security-related exceptions specially from other sorts of naming exception.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.NoInitialContextException,NoInitialContextException,"This exception is thrown when no initial context implementation can be created.  The policy of how an initial context implementation is selected is described in the documentation of the InitialContext class. This exception can be thrown during any interaction with the InitialContext, not only when the InitialContext is constructed. For example, the implementation of the initial context might lazily retrieve the context only when actual methods are invoked on it. The application should not have any dependency on when the existence of an initial context is determined.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.NoPermissionException,NoPermissionException,"This exception is thrown when attempting to perform an operation for which the client has no permission. The access control/permission model is dictated by the directory/naming server.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.NotContextException,NotContextException,"This exception is thrown when a naming operation proceeds to a point where a context is required to continue the operation, but the resolved object is not a context. For example, Context.destroy() requires that the named object be a context. If it is not, NotContextException is thrown. Another example is a non-context being encountered during the resolution phase of the Context methods. It is also thrown when a particular subtype of context is required, such as a DirContext, and the resolved object is a context but not of the required subtype.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.OperationNotSupportedException,OperationNotSupportedException,"This exception is thrown when a context implementation does not support the operation being invoked. For example, if a server does not support the Context.bind() method it would throw OperationNotSupportedException when the bind() method is invoked on it.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.PartialResultException,PartialResultException,"This exception is thrown to indicate that the result being returned or returned so far is partial, and that the operation cannot be completed.  For example, when listing a context, this exception indicates that returned results only represents some of the bindings in the context.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.ReferralException,ReferralException,"This abstract class is used to represent a referral exception, which is generated in response to a referral such as that returned by LDAP v3 servers.  A service provider provides a subclass of ReferralException by providing implementations for getReferralInfo() and getReferralContext() (and appropriate constructors and/or corresponding "set" methods).  The following code sample shows how ReferralException can be used. while (true) {          try {              bindings = ctx.listBindings(name);              while (bindings.hasMore()) {                  b = bindings.next();                  ...              }              break;          } catch (ReferralException e) {              ctx = e.getReferralContext();          }      }  ReferralException is an abstract class. Concrete implementations determine its synchronization and serialization properties. An environment parameter passed to the getReferralContext() method is owned by the caller. The service provider will not modify the object or keep a reference to it, but may keep a reference to a clone of it."
javax.naming.ServiceUnavailableException,ServiceUnavailableException,"This exception is thrown when attempting to communicate with a directory or naming service and that service is not available. It might be unavailable for different reasons. For example, the server might be too busy to service the request, or the server might not be registered to service any requests, etc.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.SizeLimitExceededException,SizeLimitExceededException,"This exception is thrown when a method produces a result that exceeds a size-related limit. This can happen, for example, if the result contains more objects than the user requested, or when the size of the result exceeds some implementation-specific limit.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.naming.TimeLimitExceededException,TimeLimitExceededException,"This exception is thrown when a method does not terminate within the specified time limit. This can happen, for example, if the user specifies that the method should take no longer than 10 seconds, and the method fails to complete with 10 seconds.  Synchronization and serialization issues that apply to NamingException apply directly here."
javax.net.ssl.SSLException,SSLException,"Indicates some kind of error detected by an SSL subsystem. This class is the general class of exceptions produced by failed SSL-related operations."
javax.net.ssl.SSLHandshakeException,SSLHandshakeException,"Indicates that the client and server could not negotiate the desired level of security.  The connection is no longer usable."
javax.net.ssl.SSLKeyException,SSLKeyException,"Reports a bad SSL key.  Normally, this indicates misconfiguration of the server or client SSL certificate and private key."
javax.net.ssl.SSLPeerUnverifiedException,SSLPeerUnverifiedException,"Indicates that the peer's identity has not been verified.  When the peer was not able to identify itself (for example; no certificate, the particular cipher suite being used does not support authentication, or no peer authentication was established during SSL handshaking) this exception is thrown."
javax.net.ssl.SSLProtocolException,SSLProtocolException,"Reports an error in the operation of the SSL protocol.  Normally this indicates a flaw in one of the protocol implementations."
javax.print.attribute.UnmodifiableSetException,UnmodifiableSetException,"Thrown to indicate that the requested operation cannot be performed because the set is unmodifiable."
javax.print.AttributeException,AttributeException,"Interface AttributeException is a mixin interface which a subclass of PrintException can implement to report an error condition involving one or more printing attributes that a particular Print Service instance does not support. Either the attribute is not supported at all, or the attribute is supported but the particular specified value is not supported. The Print Service API does not define any print exception classes that implement interface AttributeException, that being left to the Print Service implementor's discretion."
javax.print.FlavorException,FlavorException,"Interface FlavorException is a mixin interface which a subclass of PrintException can implement to report an error condition involving a doc flavor or flavors (class DocFlavor). The Print Service API does not define any print exception classes that implement interface FlavorException, that being left to the Print Service implementor's discretion."
javax.print.PrintException,PrintException,"Class PrintException encapsulates a printing-related error condition that occurred while using a Print Service instance. This base class furnishes only a string description of the error. Subclasses furnish more detailed information if applicable."
javax.print.URIException,URIException,"Interface URIException is a mixin interface which a subclass of PrintException can implement to report an error condition involving a URI address. The Print Service API does not define any print exception classes that implement interface URIException, that being left to the Print Service implementor's discretion."
javax.script.ScriptException,ScriptException,"The generic Exception class for the Scripting APIs.  Checked exception types thrown by underlying scripting implementations must be wrapped in instances of ScriptException.  The class has members to store line and column numbers and filenames if this information is available."
javax.security.auth.callback.UnsupportedCallbackException,UnsupportedCallbackException,"Signals that a CallbackHandler does not recognize a particular Callback."
javax.security.auth.DestroyFailedException,DestroyFailedException,"Signals that a destroy operation failed.  This exception is thrown by credentials implementing the Destroyable interface when the destroy method fails."
javax.security.auth.login.AccountException,AccountException,"A generic account exception."
javax.security.auth.login.AccountExpiredException,AccountExpiredException,"Signals that a user account has expired.  This exception is thrown by LoginModules when they determine that an account has expired.  For example, a LoginModule, after successfully authenticating a user, may determine that the user's account has expired.  In this case the LoginModule throws this exception to notify the application.  The application can then take the appropriate steps to notify the user."
javax.security.auth.login.AccountLockedException,AccountLockedException,"Signals that an account was locked.  This exception may be thrown by a LoginModule if it determines that authentication is being attempted on a locked account."
javax.security.auth.login.AccountNotFoundException,AccountNotFoundException,"Signals that an account was not found.  This exception may be thrown by a LoginModule if it is unable to locate an account necessary to perform authentication."
javax.security.auth.login.CredentialException,CredentialException,"A generic credential exception."
javax.security.auth.login.CredentialExpiredException,CredentialExpiredException,"Signals that a Credential has expired.  This exception is thrown by LoginModules when they determine that a Credential has expired. For example, a LoginModule authenticating a user in its login method may determine that the user's password, although entered correctly, has expired.  In this case the LoginModule throws this exception to notify the application.  The application can then take the appropriate steps to assist the user in updating the password."
javax.security.auth.login.CredentialNotFoundException,CredentialNotFoundException,"Signals that a credential was not found.  This exception may be thrown by a LoginModule if it is unable to locate a credential necessary to perform authentication."
javax.security.auth.login.FailedLoginException,FailedLoginException,"Signals that user authentication failed.  This exception is thrown by LoginModules if authentication failed. For example, a LoginModule throws this exception if the user entered an incorrect password."
javax.security.auth.login.LoginException,LoginException,"This is the basic login exception."
javax.security.auth.RefreshFailedException,RefreshFailedException,"Signals that a refresh operation failed.  This exception is thrown by credentials implementing the Refreshable interface when the refresh method fails."
javax.security.cert.CertificateEncodingException,CertificateEncodingException,"Certificate Encoding Exception. This is thrown whenever an error occurs whilst attempting to encode a certificate. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."
javax.security.cert.CertificateException,CertificateException,"This exception indicates one of a variety of certificate problems. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."
javax.security.cert.CertificateExpiredException,CertificateExpiredException,"Certificate Expired Exception. This is thrown whenever the current Date or the specified Date is after the notAfter date/time specified in the validity period of the certificate. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."
javax.security.cert.CertificateNotYetValidException,CertificateNotYetValidException,"Certificate is not yet valid exception. This is thrown whenever the current Date or the specified Date is before the notBefore date/time in the Certificate validity period. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."
javax.security.cert.CertificateParsingException,CertificateParsingException,"Certificate Parsing Exception. This is thrown whenever invalid DER encoded certificate is parsed or unsupported DER features are found in the Certificate. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."
javax.security.sasl.AuthenticationException,AuthenticationException,"This exception is thrown by a SASL mechanism implementation to indicate that the SASL exchange has failed due to reasons related to authentication, such as an invalid identity, passphrase, or key.  Note that the lack of an AuthenticationException does not mean that the failure was not due to an authentication error.  A SASL mechanism implementation might throw the more general SaslException instead of AuthenticationException if it is unable to determine the nature of the failure, or if does not want to disclose the nature of the failure, for example, due to security reasons."
javax.security.sasl.SaslException,SaslException,"This class represents an error that has occurred when using SASL."
javax.sound.midi.InvalidMidiDataException,InvalidMidiDataException,"An InvalidMidiDataException indicates that inappropriate MIDI data was encountered. This often means that the data is invalid in and of itself, from the perspective of the MIDI specification.  An example would be an undefined status byte.  However, the exception might simply mean that the data was invalid in the context it was used, or that the object to which the data was given was unable to parse or use it. For example, a file reader might not be able to parse a Type 2 MIDI file, even though that format is defined in the MIDI specification."
javax.sound.midi.MidiUnavailableException,MidiUnavailableException,"A MidiUnavailableException is thrown when a requested MIDI component cannot be opened or created because it is unavailable.  This often occurs when a device is in use by another application.  More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application).  For an example of the latter case, see the setReceiver method of Transmitter."
javax.sound.sampled.LineUnavailableException,LineUnavailableException,"A LineUnavailableException is an exception indicating that a line cannot be opened because it is unavailable.  This situation arises most commonly when a requested line is already in use by another application."
javax.sound.sampled.UnsupportedAudioFileException,UnsupportedAudioFileException,"An UnsupportedAudioFileException is an exception indicating that an operation failed because a file did not contain valid data of a recognized file type and format."
javax.sql.rowset.serial.SerialException,SerialException,"Indicates and an error with the serialization or de-serialization of SQL types such as BLOB, CLOB, STRUCT or ARRAY in addition to SQL types such as DATALINK and JAVAOBJECT"
javax.sql.rowset.spi.SyncFactoryException,SyncFactoryException,"Indicates an error with SyncFactory mechanism. A disconnected RowSet implementation cannot be used  without a SyncProvider being successfully instantiated"
javax.sql.rowset.spi.SyncProviderException,SyncProviderException,"Indicates an error with the SyncProvider mechanism. This exception is created by a SyncProvider abstract class extension if it encounters violations in reading from or writing to the originating data source.  If it is implemented to do so, the SyncProvider object may also create a SyncResolver object and either initialize the SyncProviderException object with it at construction time or set it with the SyncProvider object at a later time.  The method acceptChanges will throw this exception after the writer has finished checking for conflicts and has found one or more conflicts. An application may catch a SyncProviderException object and call its getSyncResolver method to get its SyncResolver object. See the code fragment in the interface comment for SyncResolver for an example. This SyncResolver object will mirror the RowSet object that generated the exception, except that it will contain only the values from the data source that are in conflict.  All other values in the SyncResolver object will be null.  The SyncResolver object may be used to examine and resolve each conflict in a row and then go to the next row with a conflict to repeat the procedure.  A SyncProviderException object may or may not contain a description of the condition causing the exception.  The inherited method getMessage may be called to retrieve the description if there is one."
javax.swing.text.BadLocationException,BadLocationException,"This exception is to report bad locations within a document model (that is, attempts to reference a location that doesn't exist).  Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.  As of 1.4, support for long term storage of all JavaBeans&trade; has been added to the java.beans package. Please see XMLEncoder."
javax.swing.text.ChangedCharSetException,ChangedCharSetException,"ChangedCharSetException as the name indicates is an exception thrown when the charset is changed."
javax.swing.tree.ExpandVetoException,ExpandVetoException,"Exception used to stop and expand/collapse from happening. See How to Write a Tree-Will-Expand Listener in The Java Tutorial for further information and examples."
javax.swing.undo.CannotRedoException,CannotRedoException,"Thrown when an UndoableEdit is told to redo() and can't.  Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.  As of 1.4, support for long term storage of all JavaBeans&trade; has been added to the java.beans package. Please see XMLEncoder."
javax.swing.undo.CannotUndoException,CannotUndoException,"Thrown when an UndoableEdit is told to undo() and can't.  Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.  As of 1.4, support for long term storage of all JavaBeans&trade; has been added to the java.beans package. Please see XMLEncoder."
javax.swing.UnsupportedLookAndFeelException,UnsupportedLookAndFeelException,"An exception that indicates the requested look &amp; feel management classes are not present on the user's system.  Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.  As of 1.4, support for long term storage of all JavaBeans&trade; has been added to the java.beans package. Please see XMLEncoder."
javax.transaction.InvalidTransactionException,InvalidTransactionException,"This exception indicates that the request carried an invalid transaction context. For example, this exception could be raised if an error occured when trying to register a resource."
javax.transaction.TransactionRequiredException,TransactionRequiredException,"This exception indicates that a request carried a null transaction context, but the target object requires an activate transaction."
javax.transaction.TransactionRolledbackException,TransactionRolledbackException,"This exception indicates that the transaction associated with processing of the request has been rolled back, or marked to roll back. Thus the requested operation either could not be performed or was not performed because further computation on behalf of the transaction would be fruitless"
javax.transaction.xa.XAException,XAException,"The XAException is thrown by the Resource Manager (RM) to inform the Transaction Manager of an error encountered by the involved transaction."
javax.xml.bind.DataBindingException,DataBindingException,"Exception that represents a failure in a JAXB operation.  This exception differs from JAXBException in that this is an unchecked exception, while JAXBException is a checked exception."
javax.xml.bind.JAXBException,JAXBException,"This is the root exception class for all JAXB exceptions."
javax.xml.bind.MarshalException,MarshalException,"This exception indicates that an error has occurred while performing a marshal operation that the provider is unable to recover from.  The ValidationEventHandler can cause this exception to be thrown during the marshal operations.  See ValidationEventHandler.handleEvent(ValidationEvent)."
javax.xml.bind.PropertyException,PropertyException,"This exception indicates that an error was encountered while getting or setting a property."
javax.xml.bind.TypeConstraintException,TypeConstraintException,"This exception indicates that a violation of a dynamically checked type constraint was detected.  This exception can be thrown by the generated setter methods of the schema derived Java content classes.  However, since fail-fast validation is an optional feature for JAXB Providers to support, not all setter methods will throw this exception when a type constraint is violated.  If this exception is throw while invoking a fail-fast setter, the value of the property is guaranteed to remain unchanged, as if the setter were never called."
javax.xml.bind.UnmarshalException,UnmarshalException,"This exception indicates that an error has occurred while performing an unmarshal operation that prevents the JAXB Provider from completing the operation.  The ValidationEventHandler can cause this exception to be thrown during the unmarshal operations.  See ValidationEventHandler.handleEvent(ValidationEvent)."
javax.xml.bind.ValidationException,ValidationException,"This exception indicates that an error has occurred while performing a validate operation.  The ValidationEventHandler can cause this exception to be thrown during the validate operations.  See ValidationEventHandler.handleEvent(ValidationEvent)."
javax.xml.crypto.dsig.TransformException,TransformException,"Indicates an exceptional condition that occurred while executing a transform algorithm. A TransformException can contain a cause: another throwable that caused this TransformException to get thrown."
javax.xml.crypto.dsig.XMLSignatureException,XMLSignatureException,"Indicates an exceptional condition that occurred during the XML signature generation or validation process. An XMLSignatureException can contain a cause: another throwable that caused this XMLSignatureException to get thrown."
javax.xml.crypto.KeySelectorException,KeySelectorException,"Indicates an exceptional condition thrown by a KeySelector. A KeySelectorException can contain a cause: another throwable that caused this KeySelectorException to get thrown."
javax.xml.crypto.MarshalException,MarshalException,"Indicates an exceptional condition that occurred during the XML marshalling or unmarshalling process. A MarshalException can contain a cause: another throwable that caused this MarshalException to get thrown."
javax.xml.crypto.NoSuchMechanismException,NoSuchMechanismException,"This exception is thrown when a particular XML mechanism is requested but is not available in the environment. A NoSuchMechanismException can contain a cause: another throwable that caused this NoSuchMechanismException to get thrown."
javax.xml.crypto.URIReferenceException,URIReferenceException,"Indicates an exceptional condition thrown while dereferencing a URIReference. A URIReferenceException can contain a cause: another throwable that caused this URIReferenceException to get thrown."
javax.xml.datatype.DatatypeConfigurationException,DatatypeConfigurationException,"Indicates a serious configuration error."
javax.xml.parsers.FactoryConfigurationError,FactoryConfigurationError,"Thrown when a problem with configuration with the Parser Factories exists. This error will typically be thrown when the class of a parser factory specified in the system properties cannot be found or instantiated."
javax.xml.parsers.ParserConfigurationException,ParserConfigurationException,"Indicates a serious configuration error."
javax.xml.soap.SOAPException,SOAPException,"An exception that signals that a SOAP exception has occurred. A SOAPException object may contain a String that gives the reason for the exception, an embedded Throwable object, or both. This class provides methods for retrieving reason messages and for retrieving the embedded Throwable object.  Typical reasons for throwing a SOAPException object are problems such as difficulty setting a header, not being able to send a message, and not being able to get a connection with the provider.  Reasons for embedding a Throwable object include problems such as input/output errors or a parsing problem, such as an error in parsing a header."
javax.xml.stream.FactoryConfigurationError,FactoryConfigurationError,"An error class for reporting factory configuration errors."
javax.xml.stream.XMLStreamException,XMLStreamException,"The base exception for unexpected processing errors.  This Exception class is used to report well-formedness errors as well as unexpected processing conditions."
javax.xml.transform.ErrorListener,ErrorListener,"Receive notification of a warning. Transformer can use this method to report conditions that are not errors or fatal errors.  The default behaviour is to take no action. After invoking this method, the Transformer must continue with the transformation. It should still be possible for the application to process the document through to the end."
javax.xml.transform.TransformerConfigurationException,TransformerConfigurationException,"Indicates a serious configuration error."
javax.xml.transform.TransformerException,TransformerException,"This class specifies an exceptional condition that occurred during the transformation process."
javax.xml.transform.TransformerFactoryConfigurationError,TransformerFactoryConfigurationError,"Thrown when a problem with configuration with the Transformer Factories exists. This error will typically be thrown when the class of a transformation factory specified in the system properties cannot be found or instantiated."
javax.xml.validation.SchemaFactoryConfigurationError,SchemaFactoryConfigurationError,"Thrown when a problem with configuration with the Schema Factories exists. This error will typically be thrown when the class of a schema factory specified in the system properties cannot be found or instantiated."
javax.xml.ws.http.HTTPException,HTTPException,"The HTTPException exception represents a  XML/HTTP fault.  Since there is no standard format for faults or exceptions  in XML/HTTP messaging, only the HTTP status code is captured."
javax.xml.ws.ProtocolException,ProtocolException,"The ProtocolException class is a  base class for exceptions related to a specific protocol binding. Subclasses  are used to communicate protocol level fault information to clients and may  be used on the server to control the protocol specific fault representation."
javax.xml.ws.soap.SOAPFaultException,SOAPFaultException,"The SOAPFaultException exception represents a  SOAP 1.1 or 1.2 fault.  A SOAPFaultException wraps a SAAJ SOAPFault  that manages the SOAP-specific representation of faults.  The createFault method of  javax.xml.soap.SOAPFactory may be used to create an instance  of javax.xml.soap.SOAPFault for use with the  constructor. SOAPBinding contains an accessor for the  SOAPFactory used by the binding instance.  Note that the value of getFault is the only part of the  exception used when searializing a SOAP fault.  Refer to the SOAP specification for a complete  description of SOAP faults."
javax.xml.ws.WebServiceException,WebServiceException,"The WebServiceException class is the base  exception class for all JAX-WS API runtime exceptions."
javax.xml.xpath.XPathException,XPathException,"XPathException represents a generic XPath exception."
javax.xml.xpath.XPathExpressionException,XPathExpressionException,"XPathExpressionException represents an error in an XPath expression."
javax.xml.xpath.XPathFactoryConfigurationException,XPathFactoryConfigurationException,"XPathFactoryConfigurationException represents a configuration error in a XPathFactory environment."
javax.xml.xpath.XPathFunctionException,XPathFunctionException,"XPathFunctionException represents an error with an XPath function."
org.ietf.jgss.GSSException,GSSException,"This exception is thrown whenever a GSS-API error occurs, including any mechanism specific error.  It may contain both the major and the minor GSS-API status codes.  Major error codes are those defined at the GSS-API level in this class. Minor error codes are mechanism specific error codes that can provide additional information. The underlying mechanism implementation is responsible for setting appropriate minor status codes when throwing this exception.  Aside from delivering the numeric error codes to the caller, this class performs the mapping from their numeric values to textual representations. "
org.omg.CORBA.ExceptionList,ExceptionList,"An object used in Request operations to describe the exceptions that can be thrown by a method.  It maintains a modifiable list of TypeCodes of the exceptions.  The following code fragment demonstrates creating an ExceptionList object:     ORB orb = ORB.init(args, null);    org.omg.CORBA.ExceptionList excList = orb.create_exception_list();  The variable excList represents an ExceptionList object with no TypeCode objects in it.  To add items to the list, you first create a TypeCode object for the exception you want to include, using the ORB method create_exception_tc.  Then you use the ExceptionList method add to add it to the list. The class ExceptionList has a method for getting the number of TypeCode objects in the list, and  after items have been added, it is possible to call methods for accessing or deleting an item at a designated index."
org.omg.CORBA.PolicyError,PolicyError,"A user exception thrown when a policy error occurs.  A PolicyError exception may include one of the following policy error reason codes defined in the org.omg.CORBA package: BAD_POLICY, BAD_POLICY_TYPE, BAD_POLICY_VALUE, UNSUPPORTED_POLICY, UNSUPPORTED_POLICY_VALUE."
org.omg.CORBA.PolicyErrorCodeHelper,PolicyErrorCodeHelper,"Encapsulates a reason a Policy may be invalid."
org.omg.CORBA.PolicyErrorHelper,PolicyErrorHelper,"Thrown to indicate problems with parameter values passed to the ORB.create_policy operation."
org.omg.CORBA.PolicyErrorHolder,PolicyErrorHolder,"Thrown to indicate problems with parameter values passed to the ORB.create_policy operation."
org.omg.CORBA.portable.ApplicationException,ApplicationException,"This class is used for reporting application level exceptions between ORBs and stubs."
org.omg.CORBA.portable.IndirectionException,IndirectionException,"The Indirection exception is a Java specific system exception. It is thrown when the ORB's input stream is called to demarshal a value that is encoded as an indirection that is in the process of being demarshaled. This can occur when the ORB input stream calls the ValueHandler to demarshal an RMI value whose state contains a recursive reference to itself. Because the top-level ValueHandler.read_value() call has not yet returned a value, the ORB input stream's indirection table does not contain an entry for an object with the stream offset specified by the indirection tag. The stream offset is returned in the exception's offset field."
org.omg.CORBA.portable.RemarshalException,RemarshalException,"This class is used for reporting locate forward exceptions and object forwardGIOP messages back to the ORB. In this case the ORB must remarshal the requestbefore trying again.Stubs which use the stream-based model shall catch the RemarshalExceptionwhich is potentially thrown from the _invoke() method of ObjectImpl.Upon catching the exception, the stub shall immediately remarshal the request by calling_request(), marshalling the arguments (if any), and then calling_invoke(). The stub shall repeat this process until _invoke()returns normally or raises some exception other than RemarshalException."
org.omg.CORBA.portable.UnknownException,UnknownException,"The org.omg.CORBA.portable.UnknownException is used for reporting unknown exceptions between ties and ORBs and between ORBs and stubs. It provides a Java representation of an UNKNOWN system exception that has an UnknownExceptionInfo service context. If the CORBA system exception org.omg.CORBA.portable.UnknownException is thrown, then the stub does one of the following: (1) Translates it to org.omg.CORBA.UNKNOWN. (2) Translates it to the nested exception that the UnknownException contains. (3) Passes it on directly to the user."
org.omg.CORBA.SystemException,SystemException,"The root class for all CORBA standard exceptions. These exceptions may be thrown as a result of any CORBA operation invocation and may also be returned by many standard CORBA API methods. The standard exceptions contain a minor code, allowing more detailed specification, and a completion status. This class is subclassed to generate each one of the set of standard ORB exceptions. SystemException extends java.lang.RuntimeException; thus none of the SystemException exceptions need to be declared in signatures of the Java methods mapped from operations in IDL interfaces."
org.omg.CORBA.UnknownUserException,UnknownUserException,"A class that contains user exceptions returned by the server. When the client uses the DII to make an invocation, any user exception returned from the server is enclosed in an Any object contained in the UnknownUserException object. This is available from the Environment object returned by the method Request.env."
org.omg.CORBA.UnknownUserExceptionHelper,UnknownUserExceptionHelper,"The Helper for UnknownUserException.  For more information on Helper files, see  "Generated Files: Helper Files". org/omg/CORBA/UnknownUserExceptionHelper.java Generated by the IDL-to-Java compiler (portable), version "3.0" from CORBA.idl Thursday, August 24, 2000 5:52:22 PM PDT"
org.omg.CORBA.UnknownUserExceptionHolder,UnknownUserExceptionHolder,"The Holder for UnknownUserException.  For more information on Holder files, see  "Generated Files: Holder Files". org/omg/CORBA/UnknownUserExceptionHolder.java Generated by the IDL-to-Java compiler (portable), version "3.0" from CORBA.idl Thursday, August 24, 2000 5:52:22 PM PDT"
org.omg.CORBA.UserException,UserException,"The root class for CORBA IDL-defined user exceptions. All CORBA user exceptions are checked exceptions, which means that they need to be declared in method signatures."
org.omg.IOP.ExceptionDetailMessage,ExceptionDetailMessage,"org/omg/IOP/ExceptionDetailMessage.java . Generated by the IDL-to-Java compiler (portable), version "3.2" from /scratch/jenkins/workspace/8-2-build-linux-amd64/jdk8u241/331/corba/src/share/classes/org/omg/PortableInterceptor/IOP.idl Wednesday, December 11, 2019 2:23:52 AM PST"
org.omg.PortableInterceptor.SYSTEM_EXCEPTION,SYSTEM_EXCEPTION,"org/omg/PortableInterceptor/SYSTEM_EXCEPTION.java . Generated by the IDL-to-Java compiler (portable), version "3.2" from /scratch/jenkins/workspace/8-2-build-linux-amd64/jdk8u241/331/corba/src/share/classes/org/omg/PortableInterceptor/Interceptors.idl Wednesday, December 11, 2019 2:23:52 AM PST"
org.omg.PortableInterceptor.USER_EXCEPTION,USER_EXCEPTION,"org/omg/PortableInterceptor/USER_EXCEPTION.java . Generated by the IDL-to-Java compiler (portable), version "3.2" from /scratch/jenkins/workspace/8-2-build-linux-amd64/jdk8u241/331/corba/src/share/classes/org/omg/PortableInterceptor/Interceptors.idl Wednesday, December 11, 2019 2:23:52 AM PST"
org.w3c.dom.DOMError,DOMError,"DOMError is an interface that describes an error. See also the Document Object Model (DOM) Level 3 Core Specification."
org.w3c.dom.DOMErrorHandler,DOMErrorHandler,"DOMErrorHandler is a callback interface that the DOM implementation can call when reporting errors that happens while processing XML data, or when doing some other processing (e.g. validating a document). A DOMErrorHandler object can be attached to a Document using the "error-handler" on the DOMConfiguration interface. If more than one error needs to be reported during an operation, the sequence and numbers of the errors passed to the error handler are implementation dependent.  The application that is using the DOM implementation is expected to implement this interface. See also the Document Object Model (DOM) Level 3 Core Specification."
org.w3c.dom.DOMException,DOMException,"DOM operations only raise exceptions in "exceptional" circumstances, i.e., when an operation is impossible to perform (either for logical reasons, because data is lost, or because the implementation has become unstable). In general, DOM methods return specific error values in ordinary processing situations, such as out-of-bound errors when using NodeList. Implementations should raise other exceptions under other circumstances. For example, implementations should raise an implementation-dependent exception if a null argument is passed when null  was not expected. Some languages and object systems do not support the concept of exceptions. For such systems, error conditions may be indicated using native error reporting mechanisms. For some bindings, for example, methods may return error codes similar to those listed in the corresponding method descriptions. See also the Document Object Model (DOM) Level 3 Core Specification."
org.w3c.dom.events.EventException,EventException,"Event operations may throw an EventException as specified in their method descriptions. See also the Document Object Model (DOM) Level 2 Events Specification."
org.w3c.dom.ls.LSException,LSException,"Parser or write operations may throw an LSException if the processing is stopped. The processing can be stopped due to a DOMError with a severity of DOMError.SEVERITY_FATAL_ERROR or a non recovered DOMError.SEVERITY_ERROR, or if DOMErrorHandler.handleError() returned false. Note:  As suggested in the definition of the constants in the DOMError interface, a DOM implementation may choose to continue after a fatal error, but the resulting DOM tree is then implementation dependent. See also the Document Object Model (DOM) Level 3 Loadand Save Specification."
org.xml.sax.ErrorHandler,ErrorHandler,"Receive notification of a warning. SAX parsers will use this method to report conditions that are not errors or fatal errors as defined by the XML recommendation.  The default behaviour is to take no action. The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. Filters may use this method to report other, non-XML warnings as well."
org.xml.sax.SAXException,SAXException,"Encapsulate a general SAX error or warning.  This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY. See http://www.saxproject.org for further information.  This class can contain basic error or warning information from either the XML parser or the application: a parser writer or application writer can subclass it to provide additional functionality.  SAX handlers may throw this exception or any exception subclassed from it. If the application needs to pass through other types of exceptions, it must wrap those exceptions in a SAXException or an exception derived from a SAXException. If the parser or application needs to include information about a specific location in an XML document, it should use the SAXParseException subclass."
org.xml.sax.SAXNotRecognizedException,SAXNotRecognizedException,"Exception class for an unrecognized identifier.  This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY. See http://www.saxproject.org for further information.  An XMLReader will throw this exception when it finds an unrecognized feature or property identifier; SAX applications and extensions may use this class for other, similar purposes."
org.xml.sax.SAXNotSupportedException,SAXNotSupportedException,"Exception class for an unsupported operation.  This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY. See http://www.saxproject.org for further information.  An XMLReader will throw this exception when it recognizes a feature or property identifier, but cannot perform the requested operation (setting a state or value).  Other SAX2 applications and extensions may use this class for similar purposes."
org.xml.sax.SAXParseException,SAXParseException,"Encapsulate an XML parse error or warning.  This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY. See http://www.saxproject.org for further information.  This exception may include information for locating the error in the original XML document, as if it came from a Locator object.  Note that although the application will receive a SAXParseException as the argument to the handlers in the ErrorHandler interface, the application is not actually required to throw the exception; instead, it can simply read the information in it and take a different action. Since this exception is a subclass of SAXException, it inherits the ability to wrap another exception."
